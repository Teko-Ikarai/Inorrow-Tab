{
  "version": 3,
  "sources": ["../src/main.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/utils/math_utils.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/utils/color_utils.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/hct/viewing_conditions.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/hct/cam16.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/hct/hct_solver.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/hct/hct.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/blend/blend.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/contrast/contrast.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/dislike/dislike_analyzer.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/dynamiccolor/dynamic_color.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/scheme/variant.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/dynamiccolor/contrast_curve.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/dynamiccolor/tone_delta_pair.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/dynamiccolor/material_dynamic_colors.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/palettes/tonal_palette.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/palettes/core_palette.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/quantize/lab_point_provider.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/quantize/quantizer_wsmeans.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/quantize/quantizer_map.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/quantize/quantizer_wu.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/quantize/quantizer_celebi.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/scheme/dynamic_scheme.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/scheme/scheme.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/scheme/scheme_expressive.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/scheme/scheme_vibrant.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/score/score.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/utils/string_utils.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/utils/image_utils.ts", "../node_modules/.pnpm/@material+material-color-utilities@0.2.7/node_modules/@material/material-color-utilities/utils/theme_utils.ts", "../dev/bundle.js"],
  "sourcesContent": ["import { argbFromHex, themeFromSourceColor, themeFromImage, hexFromArgb, Theme, CustomColor } from '@material/material-color-utilities'\r\n\r\nexport { hexFromArgb, argbFromHex }\r\n\r\nconst customs = [\r\n  { value: argbFromHex('#008000'), name: 'success', blend: true },\r\n  { value: argbFromHex('#ffebcd'), name: 'warning', blend: true }\r\n]\r\n\r\nconst getTheme = (theme: Theme) => {\r\n  const { palettes, schemes: { light, dark } } = theme\r\n  const colors: { [key: string]: string } = {\r\n    '--s-color-scrim': hexFromArgb(light.scrim),\r\n    '--s-color-primary': hexFromArgb(light.primary),\r\n    '--s-color-on-primary': hexFromArgb(light.onPrimary),\r\n    '--s-color-primary-container': hexFromArgb(light.primaryContainer),\r\n    '--s-color-on-primary-container': hexFromArgb(light.onPrimaryContainer),\r\n    '--s-color-secondary': hexFromArgb(light.secondary),\r\n    '--s-color-on-secondary': hexFromArgb(light.onSecondary),\r\n    '--s-color-secondary-container': hexFromArgb(light.secondaryContainer),\r\n    '--s-color-on-secondary-container': hexFromArgb(light.onSecondaryContainer),\r\n    '--s-color-tertiary': hexFromArgb(light.tertiary),\r\n    '--s-color-on-tertiary': hexFromArgb(light.onTertiary),\r\n    '--s-color-tertiary-container': hexFromArgb(light.tertiaryContainer),\r\n    '--s-color-on-tertiary-container': hexFromArgb(light.onTertiaryContainer),\r\n    '--s-color-error': hexFromArgb(light.error),\r\n    '--s-color-on-error': hexFromArgb(light.onError),\r\n    '--s-color-error-container': hexFromArgb(light.errorContainer),\r\n    '--s-color-on-error-container': hexFromArgb(light.onErrorContainer),\r\n    '--s-color-background': hexFromArgb(light.background),\r\n    '--s-color-on-background': hexFromArgb(light.onBackground),\r\n    '--s-color-outline': hexFromArgb(light.outline),\r\n    '--s-color-outline-variant': hexFromArgb(light.outlineVariant),\r\n    '--s-color-surface': hexFromArgb(light.surface),\r\n    '--s-color-on-surface': hexFromArgb(light.onSurface),\r\n    '--s-color-surface-variant': hexFromArgb(light.surfaceVariant),\r\n    '--s-color-on-surface-variant': hexFromArgb(light.onSurfaceVariant),\r\n    '--s-color-inverse-surface': hexFromArgb(light.inverseSurface),\r\n    '--s-color-inverse-on-surface': hexFromArgb(light.inverseOnSurface),\r\n    '--s-color-inverse-primary': hexFromArgb(light.inversePrimary),\r\n    '--s-color-surface-container-lowest': hexFromArgb(palettes.neutral.tone(100)),\r\n    '--s-color-surface-container-low': hexFromArgb(palettes.neutral.tone(96)),\r\n    '--s-color-surface-container': hexFromArgb(palettes.neutral.tone(94)),\r\n    '--s-color-surface-container-high': hexFromArgb(palettes.neutral.tone(92)),\r\n    '--s-color-surface-container-highest': hexFromArgb(palettes.neutral.tone(90)),\r\n    '--s-color-dark-scrim': hexFromArgb(dark.scrim),\r\n    '--s-color-dark-primary': hexFromArgb(dark.primary),\r\n    '--s-color-dark-on-primary': hexFromArgb(dark.onPrimary),\r\n    '--s-color-dark-primary-container': hexFromArgb(dark.primaryContainer),\r\n    '--s-color-dark-on-primary-container': hexFromArgb(dark.onPrimaryContainer),\r\n    '--s-color-dark-secondary': hexFromArgb(dark.secondary),\r\n    '--s-color-dark-on-secondary': hexFromArgb(dark.onSecondary),\r\n    '--s-color-dark-secondary-container': hexFromArgb(dark.secondaryContainer),\r\n    '--s-color-dark-on-secondary-container': hexFromArgb(dark.onSecondaryContainer),\r\n    '--s-color-dark-tertiary': hexFromArgb(dark.tertiary),\r\n    '--s-color-dark-on-tertiary': hexFromArgb(dark.onTertiary),\r\n    '--s-color-dark-tertiary-container': hexFromArgb(dark.tertiaryContainer),\r\n    '--s-color-dark-on-tertiary-container': hexFromArgb(dark.onTertiaryContainer),\r\n    '--s-color-dark-error': hexFromArgb(dark.error),\r\n    '--s-color-dark-on-error': hexFromArgb(dark.onError),\r\n    '--s-color-dark-error-container': hexFromArgb(dark.errorContainer),\r\n    '--s-color-dark-on-error-container': hexFromArgb(dark.onErrorContainer),\r\n    '--s-color-dark-background': hexFromArgb(dark.background),\r\n    '--s-color-dark-on-background': hexFromArgb(dark.onBackground),\r\n    '--s-color-dark-outline': hexFromArgb(dark.outline),\r\n    '--s-color-dark-outline-variant': hexFromArgb(dark.outlineVariant),\r\n    '--s-color-dark-surface': hexFromArgb(dark.surface),\r\n    '--s-color-dark-on-surface': hexFromArgb(dark.onSurface),\r\n    '--s-color-dark-surface-variant': hexFromArgb(dark.surfaceVariant),\r\n    '--s-color-dark-on-surface-variant': hexFromArgb(dark.onSurfaceVariant),\r\n    '--s-color-dark-inverse-surface': hexFromArgb(dark.inverseSurface),\r\n    '--s-color-dark-inverse-on-surface': hexFromArgb(dark.inverseOnSurface),\r\n    '--s-color-dark-inverse-primary': hexFromArgb(dark.inversePrimary),\r\n    '--s-color-dark-surface-container-lowest': hexFromArgb(palettes.neutral.tone(4)),\r\n    '--s-color-dark-surface-container-low': hexFromArgb(palettes.neutral.tone(10)),\r\n    '--s-color-dark-surface-container': hexFromArgb(palettes.neutral.tone(12)),\r\n    '--s-color-dark-surface-container-high': hexFromArgb(palettes.neutral.tone(17)),\r\n    '--s-color-dark-surface-container-highest': hexFromArgb(palettes.neutral.tone(22)),\r\n  }\r\n  const inside = theme.customColors.slice(0, customs.length)\r\n  const outside = theme.customColors.slice(customs.length)\r\n  for (const item of inside) {\r\n    colors[`--s-color-${item.color.name}`] = hexFromArgb(item.light.color)\r\n    colors[`--s-color-on-${item.color.name}`] = hexFromArgb(item.light.onColor)\r\n    colors[`--s-color-${item.color.name}-container`] = hexFromArgb(item.light.colorContainer)\r\n    colors[`--s-color-on-${item.color.name}-container`] = hexFromArgb(item.light.onColorContainer)\r\n    colors[`--s-color-dark-${item.color.name}`] = hexFromArgb(item.dark.color)\r\n    colors[`--s-color-dark-on-${item.color.name}`] = hexFromArgb(item.dark.onColor)\r\n    colors[`--s-color-dark-${item.color.name}-container`] = hexFromArgb(item.dark.colorContainer)\r\n    colors[`--s-color-dark-on-${item.color.name}-container`] = hexFromArgb(item.dark.onColorContainer)\r\n  }\r\n  const customColors: { [key: string]: string } = {}\r\n  for (const item of outside) {\r\n    customColors[`${item.color.name}`] = hexFromArgb(item.light.color)\r\n    customColors[`on-${item.color.name}`] = hexFromArgb(item.light.onColor)\r\n    customColors[`${item.color.name}-container`] = hexFromArgb(item.light.colorContainer)\r\n    customColors[`on-${item.color.name}-container`] = hexFromArgb(item.light.onColorContainer)\r\n    customColors[`dark-${item.color.name}`] = hexFromArgb(item.dark.color)\r\n    customColors[`dark-on-${item.color.name}`] = hexFromArgb(item.dark.onColor)\r\n    customColors[`dark-${item.color.name}-container`] = hexFromArgb(item.dark.colorContainer)\r\n    customColors[`dark-on-${item.color.name}-container`] = hexFromArgb(item.dark.onColorContainer)\r\n  }\r\n  return {\r\n    theme, colors, customColors,\r\n    toString: () => {\r\n      let str = ''\r\n      for (const key in colors) {\r\n        str += `${key}: ${colors[key]};\\n`\r\n      }\r\n      return str.trimEnd()\r\n    }\r\n  }\r\n}\r\n\r\nexport const createScheme = (source: string | number | File | HTMLImageElement, options?: { page?: HTMLElement, customColor?: CustomColor[] }) => {\r\n  const customColor = [...options?.customColor ?? [], ...customs]\r\n  const setPage = (style: string) => options?.page && (options.page.style.cssText = style)\r\n  return new Promise<ReturnType<typeof getTheme>>(async (resolve, reject) => {\r\n    if (typeof source === 'number' || typeof source === 'string') {\r\n      const theme = getTheme(themeFromSourceColor(typeof source === 'number' ? source : argbFromHex(source), customColor))\r\n      setPage(theme.toString())\r\n      resolve(theme)\r\n      return\r\n    }\r\n    if (source instanceof HTMLImageElement) {\r\n      const theme = getTheme(await themeFromImage(source, customColor))\r\n      setPage(theme.toString())\r\n      resolve(theme)\r\n      return\r\n    }\r\n    if (source instanceof File) {\r\n      const img = new Image()\r\n      img.src = URL.createObjectURL(source)\r\n      img.onload = async () => {\r\n        const theme = getTheme(await themeFromImage(img, customColor))\r\n        setPage(theme.toString())\r\n        resolve(theme)\r\n      }\r\n      img.onerror = reject\r\n    }\r\n  })\r\n}", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\n/**\n * Utility methods for mathematical operations.\n */\n\n/**\n * The signum function.\n *\n * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0\n */\nexport function signum(num: number): number {\n  if (num < 0) {\n    return -1;\n  } else if (num === 0) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\n/**\n * The linear interpolation function.\n *\n * @return start if amount = 0 and stop if amount = 1\n */\nexport function lerp(start: number, stop: number, amount: number): number {\n  return (1.0 - amount) * start + amount * stop;\n}\n\n/**\n * Clamps an integer between two integers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampInt(min: number, max: number, input: number): number {\n  if (input < min) {\n    return min;\n  } else if (input > max) {\n    return max;\n  }\n\n  return input;\n}\n\n/**\n * Clamps an integer between two floating-point numbers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampDouble(min: number, max: number, input: number): number {\n  if (input < min) {\n    return min;\n  } else if (input > max) {\n    return max;\n  }\n\n  return input;\n}\n\n/**\n * Sanitizes a degree measure as an integer.\n *\n * @return a degree measure between 0 (inclusive) and 360\n * (exclusive).\n */\nexport function sanitizeDegreesInt(degrees: number): number {\n  degrees = degrees % 360;\n  if (degrees < 0) {\n    degrees = degrees + 360;\n  }\n  return degrees;\n}\n\n/**\n * Sanitizes a degree measure as a floating-point number.\n *\n * @return a degree measure between 0.0 (inclusive) and 360.0\n * (exclusive).\n */\nexport function sanitizeDegreesDouble(degrees: number): number {\n  degrees = degrees % 360.0;\n  if (degrees < 0) {\n    degrees = degrees + 360.0;\n  }\n  return degrees;\n}\n\n/**\n * Sign of direction change needed to travel from one angle to\n * another.\n *\n * For angles that are 180 degrees apart from each other, both\n * directions have the same travel distance, so either direction is\n * shortest. The value 1.0 is returned in this case.\n *\n * @param from The angle travel starts from, in degrees.\n * @param to The angle travel ends at, in degrees.\n * @return -1 if decreasing from leads to the shortest travel\n * distance, 1 if increasing from leads to the shortest travel\n * distance.\n */\nexport function rotationDirection(from: number, to: number): number {\n  const increasingDifference = sanitizeDegreesDouble(to - from);\n  return increasingDifference <= 180.0 ? 1.0 : -1.0;\n}\n\n/**\n * Distance of two points on a circle, represented using degrees.\n */\nexport function differenceDegrees(a: number, b: number): number {\n  return 180.0 - Math.abs(Math.abs(a - b) - 180.0);\n}\n\n/**\n * Multiplies a 1x3 row vector with a 3x3 matrix.\n */\nexport function matrixMultiply(row: number[], matrix: number[][]): number[] {\n  const a =\n      row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];\n  const b =\n      row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];\n  const c =\n      row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];\n  return [a, b, c];\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport * as mathUtils from './math_utils.js';\n\n/**\n * Color science utilities.\n *\n * Utility methods for color science constants and color space\n * conversions that aren't HCT or CAM16.\n */\n\nconst SRGB_TO_XYZ = [\n  [0.41233895, 0.35762064, 0.18051042],\n  [0.2126, 0.7152, 0.0722],\n  [0.01932141, 0.11916382, 0.95034478],\n];\n\nconst XYZ_TO_SRGB = [\n  [\n    3.2413774792388685,\n    -1.5376652402851851,\n    -0.49885366846268053,\n  ],\n  [\n    -0.9691452513005321,\n    1.8758853451067872,\n    0.04156585616912061,\n  ],\n  [\n    0.05562093689691305,\n    -0.20395524564742123,\n    1.0571799111220335,\n  ],\n];\n\nconst WHITE_POINT_D65 = [95.047, 100.0, 108.883];\n\n/**\n * Converts a color from RGB components to ARGB format.\n */\nexport function argbFromRgb(red: number, green: number, blue: number): number {\n  return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>>\n      0;\n}\n\n/**\n * Converts a color from linear RGB components to ARGB format.\n */\nexport function argbFromLinrgb(linrgb: number[]): number {\n  const r = delinearized(linrgb[0]);\n  const g = delinearized(linrgb[1]);\n  const b = delinearized(linrgb[2]);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Returns the alpha component of a color in ARGB format.\n */\nexport function alphaFromArgb(argb: number): number {\n  return argb >> 24 & 255;\n}\n\n/**\n * Returns the red component of a color in ARGB format.\n */\nexport function redFromArgb(argb: number): number {\n  return argb >> 16 & 255;\n}\n\n/**\n * Returns the green component of a color in ARGB format.\n */\nexport function greenFromArgb(argb: number): number {\n  return argb >> 8 & 255;\n}\n\n/**\n * Returns the blue component of a color in ARGB format.\n */\nexport function blueFromArgb(argb: number): number {\n  return argb & 255;\n}\n\n/**\n * Returns whether a color in ARGB format is opaque.\n */\nexport function isOpaque(argb: number): boolean {\n  return alphaFromArgb(argb) >= 255;\n}\n\n/**\n * Converts a color from ARGB to XYZ.\n */\nexport function argbFromXyz(x: number, y: number, z: number): number {\n  const matrix = XYZ_TO_SRGB;\n  const linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;\n  const linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;\n  const linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;\n  const r = delinearized(linearR);\n  const g = delinearized(linearG);\n  const b = delinearized(linearB);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Converts a color from XYZ to ARGB.\n */\nexport function xyzFromArgb(argb: number): number[] {\n  const r = linearized(redFromArgb(argb));\n  const g = linearized(greenFromArgb(argb));\n  const b = linearized(blueFromArgb(argb));\n  return mathUtils.matrixMultiply([r, g, b], SRGB_TO_XYZ);\n}\n\n/**\n * Converts a color represented in Lab color space into an ARGB\n * integer.\n */\nexport function argbFromLab(l: number, a: number, b: number): number {\n  const whitePoint = WHITE_POINT_D65;\n  const fy = (l + 16.0) / 116.0;\n  const fx = a / 500.0 + fy;\n  const fz = fy - b / 200.0;\n  const xNormalized = labInvf(fx);\n  const yNormalized = labInvf(fy);\n  const zNormalized = labInvf(fz);\n  const x = xNormalized * whitePoint[0];\n  const y = yNormalized * whitePoint[1];\n  const z = zNormalized * whitePoint[2];\n  return argbFromXyz(x, y, z);\n}\n\n/**\n * Converts a color from ARGB representation to L*a*b*\n * representation.\n *\n * @param argb the ARGB representation of a color\n * @return a Lab object representing the color\n */\nexport function labFromArgb(argb: number): number[] {\n  const linearR = linearized(redFromArgb(argb));\n  const linearG = linearized(greenFromArgb(argb));\n  const linearB = linearized(blueFromArgb(argb));\n  const matrix = SRGB_TO_XYZ;\n  const x =\n      matrix[0][0] * linearR + matrix[0][1] * linearG + matrix[0][2] * linearB;\n  const y =\n      matrix[1][0] * linearR + matrix[1][1] * linearG + matrix[1][2] * linearB;\n  const z =\n      matrix[2][0] * linearR + matrix[2][1] * linearG + matrix[2][2] * linearB;\n  const whitePoint = WHITE_POINT_D65;\n  const xNormalized = x / whitePoint[0];\n  const yNormalized = y / whitePoint[1];\n  const zNormalized = z / whitePoint[2];\n  const fx = labF(xNormalized);\n  const fy = labF(yNormalized);\n  const fz = labF(zNormalized);\n  const l = 116.0 * fy - 16;\n  const a = 500.0 * (fx - fy);\n  const b = 200.0 * (fy - fz);\n  return [l, a, b];\n}\n\n/**\n * Converts an L* value to an ARGB representation.\n *\n * @param lstar L* in L*a*b*\n * @return ARGB representation of grayscale color with lightness\n * matching L*\n */\nexport function argbFromLstar(lstar: number): number {\n  const y = yFromLstar(lstar);\n  const component = delinearized(y);\n  return argbFromRgb(component, component, component);\n}\n\n/**\n * Computes the L* value of a color in ARGB representation.\n *\n * @param argb ARGB representation of a color\n * @return L*, from L*a*b*, coordinate of the color\n */\nexport function lstarFromArgb(argb: number): number {\n  const y = xyzFromArgb(argb)[1];\n  return 116.0 * labF(y / 100.0) - 16.0;\n}\n\n/**\n * Converts an L* value to a Y value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param lstar L* in L*a*b*\n * @return Y in XYZ\n */\nexport function yFromLstar(lstar: number): number {\n  return 100.0 * labInvf((lstar + 16.0) / 116.0);\n}\n\n/**\n * Converts a Y value to an L* value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param y Y in XYZ\n * @return L* in L*a*b*\n */\nexport function lstarFromY(y: number): number {\n  return labF(y / 100.0) * 116.0 - 16.0;\n}\n\n/**\n * Linearizes an RGB component.\n *\n * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B\n * channel\n * @return 0.0 <= output <= 100.0, color channel converted to\n * linear RGB space\n */\nexport function linearized(rgbComponent: number): number {\n  const normalized = rgbComponent / 255.0;\n  if (normalized <= 0.040449936) {\n    return normalized / 12.92 * 100.0;\n  } else {\n    return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100.0;\n  }\n}\n\n/**\n * Delinearizes an RGB component.\n *\n * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n * linear R/G/B channel\n * @return 0 <= output <= 255, color channel converted to regular\n * RGB space\n */\nexport function delinearized(rgbComponent: number): number {\n  const normalized = rgbComponent / 100.0;\n  let delinearized = 0.0;\n  if (normalized <= 0.0031308) {\n    delinearized = normalized * 12.92;\n  } else {\n    delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n  }\n  return mathUtils.clampInt(0, 255, Math.round(delinearized * 255.0));\n}\n\n/**\n * Returns the standard white point; white on a sunny day.\n *\n * @return The white point\n */\nexport function whitePointD65(): number[] {\n  return WHITE_POINT_D65;\n}\n\n/**\n * RGBA component\n * \n * @param r Red value should be between 0-255\n * @param g Green value should be between 0-255\n * @param b Blue value should be between 0-255\n * @param a Alpha value should be between 0-255\n */\nexport interface Rgba {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\n/**\n * Return RGBA from a given int32 color\n *\n * @param argb ARGB representation of a int32 color.\n * @return RGBA representation of a int32 color.\n */\nexport function rgbaFromArgb(argb: number): Rgba {\n  const r = redFromArgb(argb);\n  const g = greenFromArgb(argb);\n  const b = blueFromArgb(argb);\n  const a = alphaFromArgb(argb);\n  return {r, g, b, a};\n}\n\n/**\n * Return int32 color from a given RGBA component\n * \n * @param rgba RGBA representation of a int32 color.\n * @returns ARGB representation of a int32 color.\n */\nexport function argbFromRgba({r, g, b, a}: Rgba): number {\n  const rValue = clampComponent(r);\n  const gValue = clampComponent(g);\n  const bValue = clampComponent(b);\n  const aValue = clampComponent(a);\n  return (aValue << 24) | (rValue << 16) | (gValue << 8) | bValue;\n}\n\nfunction clampComponent(value: number) {\n  if (value < 0) return 0;\n  if (value > 255) return 255;\n  return value\n}\n\nfunction labF(t: number): number {\n  const e = 216.0 / 24389.0;\n  const kappa = 24389.0 / 27.0;\n  if (t > e) {\n    return Math.pow(t, 1.0 / 3.0);\n  } else {\n    return (kappa * t + 16) / 116;\n  }\n}\n\nfunction labInvf(ft: number): number {\n  const e = 216.0 / 24389.0;\n  const kappa = 24389.0 / 27.0;\n  const ft3 = ft * ft * ft;\n  if (ft3 > e) {\n    return ft3;\n  } else {\n    return (116 * ft - 16) / kappa;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from '../utils/color_utils.js';\nimport * as math from '../utils/math_utils.js';\n\n/**\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n *\n * This class caches intermediate values of the CAM16 conversion process that\n * depend only on viewing conditions, enabling speed ups.\n */\nexport class ViewingConditions {\n  /** sRGB-like viewing conditions.  */\n  static DEFAULT = ViewingConditions.make();\n\n  /**\n   * Create ViewingConditions from a simple, physically relevant, set of\n   * parameters.\n   *\n   * @param whitePoint White point, measured in the XYZ color space.\n   *     default = D65, or sunny day afternoon\n   * @param adaptingLuminance The luminance of the adapting field. Informally,\n   *     how bright it is in the room where the color is viewed. Can be\n   *     calculated from lux by multiplying lux by 0.0586. default = 11.72,\n   *     or 200 lux.\n   * @param backgroundLstar The lightness of the area surrounding the color.\n   *     measured by L* in L*a*b*. default = 50.0\n   * @param surround A general description of the lighting surrounding the\n   *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a\n   *     dimly light room, like watching TV at home at night. 2.0 means there\n   *     is no difference between the lighting on the color and around it.\n   *     default = 2.0\n   * @param discountingIlluminant Whether the eye accounts for the tint of the\n   *     ambient lighting, such as knowing an apple is still red in green light.\n   *     default = false, the eye does not perform this process on\n   *       self-luminous objects like displays.\n   */\n  static make(\n      whitePoint = utils.whitePointD65(),\n      adaptingLuminance = (200.0 / Math.PI) * utils.yFromLstar(50.0) / 100.0,\n      backgroundLstar = 50.0, surround = 2.0,\n      discountingIlluminant = false): ViewingConditions {\n    const xyz = whitePoint;\n    const rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;\n    const gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;\n    const bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;\n    const f = 0.8 + surround / 10.0;\n    const c = f >= 0.9 ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0) :\n                         math.lerp(0.525, 0.59, (f - 0.8) * 10.0);\n    let d = discountingIlluminant ?\n        1.0 :\n        f * (1.0 - (1.0 / 3.6) * Math.exp((-adaptingLuminance - 42.0) / 92.0));\n    d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;\n    const nc = f;\n    const rgbD = [\n      d * (100.0 / rW) + 1.0 - d,\n      d * (100.0 / gW) + 1.0 - d,\n      d * (100.0 / bW) + 1.0 - d,\n    ];\n    const k = 1.0 / (5.0 * adaptingLuminance + 1.0);\n    const k4 = k * k * k * k;\n    const k4F = 1.0 - k4;\n    const fl = k4 * adaptingLuminance +\n        0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);\n    const n = utils.yFromLstar(backgroundLstar) / whitePoint[1];\n    const z = 1.48 + Math.sqrt(n);\n    const nbb = 0.725 / Math.pow(n, 0.2);\n    const ncb = nbb;\n    const rgbAFactors = [\n      Math.pow((fl * rgbD[0] * rW) / 100.0, 0.42),\n      Math.pow((fl * rgbD[1] * gW) / 100.0, 0.42),\n      Math.pow((fl * rgbD[2] * bW) / 100.0, 0.42),\n    ];\n    const rgbA = [\n      (400.0 * rgbAFactors[0]) / (rgbAFactors[0] + 27.13),\n      (400.0 * rgbAFactors[1]) / (rgbAFactors[1] + 27.13),\n      (400.0 * rgbAFactors[2]) / (rgbAFactors[2] + 27.13),\n    ];\n    const aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;\n    return new ViewingConditions(\n        n, aw, nbb, ncb, c, nc, rgbD, fl, Math.pow(fl, 0.25), z);\n  }\n\n  /**\n   * Parameters are intermediate values of the CAM16 conversion process. Their\n   * names are shorthand for technical color science terminology, this class\n   * would not benefit from documenting them individually. A brief overview\n   * is available in the CAM16 specification, and a complete overview requires\n   * a color science textbook, such as Fairchild's Color Appearance Models.\n   */\n  private constructor(\n      public n: number, public aw: number, public nbb: number,\n      public ncb: number, public c: number, public nc: number,\n      public rgbD: number[], public fl: number, public fLRoot: number,\n      public z: number) {}\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from '../utils/color_utils.js';\nimport * as math from '../utils/math_utils.js';\n\nimport {ViewingConditions} from './viewing_conditions.js';\n\n/**\n * CAM16, a color appearance model. Colors are not just defined by their hex\n * code, but rather, a hex code and viewing conditions.\n *\n * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,\n * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n * specification, and should be used when measuring distances between colors.\n *\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n */\nexport class Cam16 {\n  /**\n   * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in\n   * the following combinations:\n   *      -  {j or q} and {c, m, or s} and hue\n   *      - jstar, astar, bstar\n   * Prefer using a static method that constructs from 3 of those dimensions.\n   * This constructor is intended for those methods to use to return all\n   * possible dimensions.\n   *\n   * @param hue\n   * @param chroma informally, colorfulness / color intensity. like saturation\n   *     in HSL, except perceptually accurate.\n   * @param j lightness\n   * @param q brightness; ratio of lightness to white point's lightness\n   * @param m colorfulness\n   * @param s saturation; ratio of chroma to white point's chroma\n   * @param jstar CAM16-UCS J coordinate\n   * @param astar CAM16-UCS a coordinate\n   * @param bstar CAM16-UCS b coordinate\n   */\n  constructor(\n      readonly hue: number, readonly chroma: number, readonly j: number,\n      readonly q: number, readonly m: number, readonly s: number,\n      readonly jstar: number, readonly astar: number, readonly bstar: number) {}\n\n  /**\n   * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,\n   * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n   * specification, and is used to measure distances between colors.\n   */\n  distance(other: Cam16): number {\n    const dJ = this.jstar - other.jstar;\n    const dA = this.astar - other.astar;\n    const dB = this.bstar - other.bstar;\n    const dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);\n    const dE = 1.41 * Math.pow(dEPrime, 0.63);\n    return dE;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return CAM16 color, assuming the color was viewed in default viewing\n   *     conditions.\n   */\n  static fromInt(argb: number): Cam16 {\n    return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   * @return CAM16 color.\n   */\n  static fromIntInViewingConditions(\n      argb: number, viewingConditions: ViewingConditions): Cam16 {\n    const red = (argb & 0x00ff0000) >> 16;\n    const green = (argb & 0x0000ff00) >> 8;\n    const blue = (argb & 0x000000ff);\n    const redL = utils.linearized(red);\n    const greenL = utils.linearized(green);\n    const blueL = utils.linearized(blue);\n    const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n    const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n    const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n\n    const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n    const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n    const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n    const rD = viewingConditions.rgbD[0] * rC;\n    const gD = viewingConditions.rgbD[1] * gC;\n    const bD = viewingConditions.rgbD[2] * bC;\n\n    const rAF = Math.pow((viewingConditions.fl * Math.abs(rD)) / 100.0, 0.42);\n    const gAF = Math.pow((viewingConditions.fl * Math.abs(gD)) / 100.0, 0.42);\n    const bAF = Math.pow((viewingConditions.fl * Math.abs(bD)) / 100.0, 0.42);\n\n    const rA = (math.signum(rD) * 400.0 * rAF) / (rAF + 27.13);\n    const gA = (math.signum(gD) * 400.0 * gAF) / (gAF + 27.13);\n    const bA = (math.signum(bD) * 400.0 * bAF) / (bAF + 27.13);\n\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n    const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n    const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n    const atan2 = Math.atan2(b, a);\n    const atanDegrees = (atan2 * 180.0) / Math.PI;\n    const hue = atanDegrees < 0 ? atanDegrees + 360.0 :\n        atanDegrees >= 360      ? atanDegrees - 360.0 :\n                                  atanDegrees;\n    const hueRadians = (hue * Math.PI) / 180.0;\n\n    const ac = p2 * viewingConditions.nbb;\n    const j = 100.0 *\n        Math.pow(\n            ac / viewingConditions.aw,\n            viewingConditions.c * viewingConditions.z);\n    const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *\n        (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n    const huePrime = hue < 20.14 ? hue + 360 : hue;\n    const eHue = 0.25 * (Math.cos((huePrime * Math.PI) / 180.0 + 2.0) + 3.8);\n    const p1 =\n        (50000.0 / 13.0) * eHue * viewingConditions.nc * viewingConditions.ncb;\n    const t = (p1 * Math.sqrt(a * a + b * b)) / (u + 0.305);\n    const alpha = Math.pow(t, 0.9) *\n        Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    const c = alpha * Math.sqrt(j / 100.0);\n    const m = c * viewingConditions.fLRoot;\n    const s = 50.0 *\n        Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n    const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n    const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n\n    return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);\n  }\n\n  /**\n   * @param j CAM16 lightness\n   * @param c CAM16 chroma\n   * @param h CAM16 hue\n   */\n  static fromJch(j: number, c: number, h: number): Cam16 {\n    return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param j CAM16 lightness\n   * @param c CAM16 chroma\n   * @param h CAM16 hue\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   */\n  static fromJchInViewingConditions(\n      j: number, c: number, h: number,\n      viewingConditions: ViewingConditions): Cam16 {\n    const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *\n        (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n    const m = c * viewingConditions.fLRoot;\n    const alpha = c / Math.sqrt(j / 100.0);\n    const s = 50.0 *\n        Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n    const hueRadians = (h * Math.PI) / 180.0;\n    const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n    const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n    return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);\n  }\n\n  /**\n   * @param jstar CAM16-UCS lightness.\n   * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the Y axis.\n   * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the X axis.\n   */\n  static fromUcs(jstar: number, astar: number, bstar: number): Cam16 {\n    return Cam16.fromUcsInViewingConditions(\n        jstar, astar, bstar, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param jstar CAM16-UCS lightness.\n   * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the Y axis.\n   * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the X axis.\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   */\n  static fromUcsInViewingConditions(\n      jstar: number, astar: number, bstar: number,\n      viewingConditions: ViewingConditions): Cam16 {\n    const a = astar;\n    const b = bstar;\n    const m = Math.sqrt(a * a + b * b);\n    const M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;\n    const c = M / viewingConditions.fLRoot;\n    let h = Math.atan2(b, a) * (180.0 / Math.PI);\n    if (h < 0.0) {\n      h += 360.0;\n    }\n    const j = jstar / (1 - (jstar - 100) * 0.007);\n    return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);\n  }\n\n  /**\n   *  @return ARGB representation of color, assuming the color was viewed in\n   *     default viewing conditions, which are near-identical to the default\n   *     viewing conditions for sRGB.\n   */\n  toInt(): number {\n    return this.viewed(ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param viewingConditions Information about the environment where the color\n   *     will be viewed.\n   * @return ARGB representation of color\n   */\n  viewed(viewingConditions: ViewingConditions): number {\n    const alpha = this.chroma === 0.0 || this.j === 0.0 ?\n        0.0 :\n        this.chroma / Math.sqrt(this.j / 100.0);\n\n    const t = Math.pow(\n        alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73),\n        1.0 / 0.9);\n    const hRad = (this.hue * Math.PI) / 180.0;\n\n    const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n    const ac = viewingConditions.aw *\n        Math.pow(\n            this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n    const p1 =\n        eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n    const p2 = ac / viewingConditions.nbb;\n\n    const hSin = Math.sin(hRad);\n    const hCos = Math.cos(hRad);\n\n    const gamma = (23.0 * (p2 + 0.305) * t) /\n        (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);\n    const a = gamma * hCos;\n    const b = gamma * hSin;\n    const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n    const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n    const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n\n    const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n    const rC = math.signum(rA) * (100.0 / viewingConditions.fl) *\n        Math.pow(rCBase, 1.0 / 0.42);\n    const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n    const gC = math.signum(gA) * (100.0 / viewingConditions.fl) *\n        Math.pow(gCBase, 1.0 / 0.42);\n    const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n    const bC = math.signum(bA) * (100.0 / viewingConditions.fl) *\n        Math.pow(bCBase, 1.0 / 0.42);\n    const rF = rC / viewingConditions.rgbD[0];\n    const gF = gC / viewingConditions.rgbD[1];\n    const bF = bC / viewingConditions.rgbD[2];\n\n    const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n    const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n    const z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;\n\n    const argb = utils.argbFromXyz(x, y, z);\n    return argb;\n  }\n\n  /// Given color expressed in XYZ and viewed in [viewingConditions], convert to\n  /// CAM16.\n  static fromXyzInViewingConditions(\n      x: number, y: number, z: number,\n      viewingConditions: ViewingConditions): Cam16 {\n    // Transform XYZ to 'cone'/'rgb' responses\n\n    const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n    const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n    const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n    // Discount illuminant\n    const rD = viewingConditions.rgbD[0] * rC;\n    const gD = viewingConditions.rgbD[1] * gC;\n    const bD = viewingConditions.rgbD[2] * bC;\n\n    // chromatic adaptation\n    const rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100.0, 0.42);\n    const gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100.0, 0.42);\n    const bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100.0, 0.42);\n    const rA = math.signum(rD) * 400.0 * rAF / (rAF + 27.13);\n    const gA = math.signum(gD) * 400.0 * gAF / (gAF + 27.13);\n    const bA = math.signum(bD) * 400.0 * bAF / (bAF + 27.13);\n\n    // redness-greenness\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    // yellowness-blueness\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n\n    // auxiliary components\n    const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n    const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n\n    // hue\n    const atan2 = Math.atan2(b, a);\n    const atanDegrees = atan2 * 180.0 / Math.PI;\n    const hue = atanDegrees < 0 ? atanDegrees + 360.0 :\n        atanDegrees >= 360      ? atanDegrees - 360 :\n                                  atanDegrees;\n    const hueRadians = hue * Math.PI / 180.0;\n\n    // achromatic response to color\n    const ac = p2 * viewingConditions.nbb;\n\n    // CAM16 lightness and brightness\n    const J = 100.0 *\n        Math.pow(\n            ac / viewingConditions.aw,\n            viewingConditions.c * viewingConditions.z);\n    const Q = (4.0 / viewingConditions.c) * Math.sqrt(J / 100.0) *\n        (viewingConditions.aw + 4.0) * (viewingConditions.fLRoot);\n\n    const huePrime = (hue < 20.14) ? hue + 360 : hue;\n    const eHue =\n        (1.0 / 4.0) * (Math.cos(huePrime * Math.PI / 180.0 + 2.0) + 3.8);\n    const p1 =\n        50000.0 / 13.0 * eHue * viewingConditions.nc * viewingConditions.ncb;\n    const t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);\n    const alpha = Math.pow(t, 0.9) *\n        Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    // CAM16 chroma, colorfulness, chroma\n    const C = alpha * Math.sqrt(J / 100.0);\n    const M = C * viewingConditions.fLRoot;\n    const s = 50.0 *\n        Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n\n    // CAM16-UCS components\n    const jstar = (1.0 + 100.0 * 0.007) * J / (1.0 + 0.007 * J);\n    const mstar = Math.log(1.0 + 0.0228 * M) / 0.0228;\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n    return new Cam16(hue, C, J, Q, M, s, jstar, astar, bstar);\n  }\n\n  /// XYZ representation of CAM16 seen in [viewingConditions].\n  xyzInViewingConditions(viewingConditions: ViewingConditions): number[] {\n    const alpha = (this.chroma === 0.0 || this.j === 0.0) ?\n        0.0 :\n        this.chroma / Math.sqrt(this.j / 100.0);\n\n    const t = Math.pow(\n        alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73),\n        1.0 / 0.9);\n    const hRad = this.hue * Math.PI / 180.0;\n\n    const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n    const ac = viewingConditions.aw *\n        Math.pow(\n            this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n    const p1 =\n        eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n\n    const p2 = (ac / viewingConditions.nbb);\n\n    const hSin = Math.sin(hRad);\n    const hCos = Math.cos(hRad);\n\n    const gamma = 23.0 * (p2 + 0.305) * t /\n        (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n    const a = gamma * hCos;\n    const b = gamma * hSin;\n    const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n    const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n    const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n\n    const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n    const rC = math.signum(rA) * (100.0 / viewingConditions.fl) *\n        Math.pow(rCBase, 1.0 / 0.42);\n    const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n    const gC = math.signum(gA) * (100.0 / viewingConditions.fl) *\n        Math.pow(gCBase, 1.0 / 0.42);\n    const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n    const bC = math.signum(bA) * (100.0 / viewingConditions.fl) *\n        Math.pow(bCBase, 1.0 / 0.42);\n    const rF = rC / viewingConditions.rgbD[0];\n    const gF = gC / viewingConditions.rgbD[1];\n    const bF = bC / viewingConditions.rgbD[2];\n\n    const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n    const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n    const z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;\n\n    return [x, y, z];\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport * as colorUtils from '../utils/color_utils.js';\nimport * as mathUtils from '../utils/math_utils.js';\n\nimport {Cam16} from './cam16.js';\nimport {ViewingConditions} from './viewing_conditions.js';\n\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * A class that solves the HCT equation.\n */\nexport class HctSolver {\n  static SCALED_DISCOUNT_FROM_LINRGB = [\n    [\n      0.001200833568784504,\n      0.002389694492170889,\n      0.0002795742885861124,\n    ],\n    [\n      0.0005891086651375999,\n      0.0029785502573438758,\n      0.0003270666104008398,\n    ],\n    [\n      0.00010146692491640572,\n      0.0005364214359186694,\n      0.0032979401770712076,\n    ],\n  ];\n\n  static LINRGB_FROM_SCALED_DISCOUNT = [\n    [\n      1373.2198709594231,\n      -1100.4251190754821,\n      -7.278681089101213,\n    ],\n    [\n      -271.815969077903,\n      559.6580465940733,\n      -32.46047482791194,\n    ],\n    [\n      1.9622899599665666,\n      -57.173814538844006,\n      308.7233197812385,\n    ],\n  ];\n\n  static Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];\n\n  static CRITICAL_PLANES = [\n    0.015176349177441876, 0.045529047532325624, 0.07588174588720938,\n    0.10623444424209313,  0.13658714259697685,  0.16693984095186062,\n    0.19729253930674434,  0.2276452376616281,   0.2579979360165119,\n    0.28835063437139563,  0.3188300904430532,   0.350925934958123,\n    0.3848314933096426,   0.42057480301049466,  0.458183274052838,\n    0.4976837250274023,   0.5391024159806381,   0.5824650784040898,\n    0.6277969426914107,   0.6751227633498623,   0.7244668422128921,\n    0.775853049866786,    0.829304845476233,    0.8848452951698498,\n    0.942497089126609,    1.0022825574869039,   1.0642236851973577,\n    1.1283421258858297,   1.1946592148522128,   1.2631959812511864,\n    1.3339731595349034,   1.407011200216447,    1.4823302800086415,\n    1.5599503113873272,   1.6398909516233677,   1.7221716113234105,\n    1.8068114625156377,   1.8938294463134073,   1.9832442801866852,\n    2.075074464868551,    2.1693382909216234,   2.2660538449872063,\n    2.36523901573795,     2.4669114995532007,   2.5710888059345764,\n    2.6777882626779785,   2.7870270208169257,   2.898822059350997,\n    3.0131901897720907,   3.1301480604002863,   3.2497121605402226,\n    3.3718988244681087,   3.4967242352587946,   3.624204428461639,\n    3.754355295633311,    3.887192587735158,    4.022731918402185,\n    4.160988767090289,    4.301978482107941,    4.445716283538092,\n    4.592217266055746,    4.741496401646282,    4.893568542229298,\n    5.048448422192488,    5.20615066083972,     5.3666897647573375,\n    5.5300801301023865,   5.696336044816294,    5.865471690767354,\n    6.037501145825082,    6.212438385869475,    6.390297286737924,\n    6.571091626112461,    6.7548350853498045,   6.941541251256611,\n    7.131223617812143,    7.323895587840543,    7.5195704746346665,\n    7.7182615035334345,   7.919981813454504,    8.124744458384042,\n    8.332562408825165,    8.543448553206703,    8.757415699253682,\n    8.974476575321063,    9.194643831691977,    9.417930041841839,\n    9.644347703669503,    9.873909240696694,    10.106627003236781,\n    10.342513269534024,   10.58158024687427,    10.8238400726681,\n    11.069304815507364,   11.317986476196008,   11.569896988756009,\n    11.825048221409341,   12.083451977536606,   12.345119996613247,\n    12.610063955123938,   12.878295467455942,   13.149826086772048,\n    13.42466730586372,    13.702830557985108,   13.984327217668513,\n    14.269168601521828,   14.55736596900856,    14.848930523210871,\n    15.143873411576273,   15.44220572664832,    15.743938506781891,\n    16.04908273684337,    16.35764934889634,    16.66964922287304,\n    16.985093187232053,   17.30399201960269,    17.62635644741625,\n    17.95219714852476,    18.281524751807332,   18.614349837764564,\n    18.95068293910138,    19.290534541298456,   19.633915083172692,\n    19.98083495742689,    20.331304511189067,   20.685334046541502,\n    21.042933821039977,   21.404114048223256,   21.76888489811322,\n    22.137256497705877,   22.50923893145328,    22.884842241736916,\n    23.264076429332462,   23.6469514538663,     24.033477234264016,\n    24.42366364919083,    24.817520537484558,   25.21505769858089,\n    25.61628489293138,    26.021211842414342,   26.429848230738664,\n    26.842203703840827,   27.258287870275353,   27.678110301598522,\n    28.10168053274597,    28.529008062403893,   28.96010235337422,\n    29.39497283293396,    29.83362889318845,    30.276079891419332,\n    30.722335150426627,   31.172403958865512,   31.62629557157785,\n    32.08401920991837,    32.54558406207592,    33.010999283389665,\n    33.4802739966603,     33.953417292456834,   34.430438229418264,\n    34.911345834551085,   35.39614910352207,    35.88485700094671,\n    36.37747846067349,    36.87402238606382,    37.37449765026789,\n    37.87891309649659,    38.38727753828926,    38.89959975977785,\n    39.41588851594697,    39.93615253289054,    40.460400508064545,\n    40.98864111053629,    41.520882981230194,   42.05713473317016,\n    42.597404951718396,   43.141702194811224,   43.6900349931913,\n    44.24241185063697,    44.798841244188324,   45.35933162437017,\n    45.92389141541209,    46.49252901546552,    47.065252796817916,\n    47.64207110610409,    48.22299226451468,    48.808024568002054,\n    49.3971762874833,     49.9904556690408,     50.587870934119984,\n    51.189430279724725,   51.79514187861014,    52.40501387947288,\n    53.0190544071392,     53.637271562750364,   54.259673423945976,\n    54.88626804504493,    55.517063457223934,   56.15206766869424,\n    56.79128866487574,    57.43473440856916,    58.08241284012621,\n    58.734331877617365,   59.39049941699807,    60.05092333227251,\n    60.715611475655585,   61.38457167773311,    62.057811747619894,\n    62.7353394731159,     63.417162620860914,   64.10328893648692,\n    64.79372614476921,    65.48848194977529,    66.18756403501224,\n    66.89098006357258,    67.59873767827808,    68.31084450182222,\n    69.02730813691093,    69.74813616640164,    70.47333615344107,\n    71.20291564160104,    71.93688215501312,    72.67524319850172,\n    73.41800625771542,    74.16517879925733,    74.9167682708136,\n    75.67278210128072,    76.43322770089146,    77.1981124613393,\n    77.96744375590167,    78.74122893956174,    79.51947534912904,\n    80.30219030335869,    81.08938110306934,    81.88105503125999,\n    82.67721935322541,    83.4778813166706,     84.28304815182372,\n    85.09272707154808,    85.90692527145302,    86.72564993000343,\n    87.54890820862819,    88.3767072518277,     89.2090541872801,\n    90.04595612594655,    90.88742016217518,    91.73345337380438,\n    92.58406282226491,    93.43925555268066,    94.29903859396902,\n    95.16341895893969,    96.03240364439274,    96.9059996312159,\n    97.78421388448044,    98.6670533535366,     99.55452497210776,\n  ];\n\n  /**\n   * Sanitizes a small enough angle in radians.\n   *\n   * @param angle An angle in radians; must not deviate too much\n   * from 0.\n   * @return A coterminal angle between 0 and 2pi.\n   */\n  private static sanitizeRadians(angle: number): number {\n    return (angle + Math.PI * 8) % (Math.PI * 2);\n  }\n\n  /**\n   * Delinearizes an RGB component, returning a floating-point\n   * number.\n   *\n   * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n   * linear R/G/B channel\n   * @return 0.0 <= output <= 255.0, color channel converted to\n   * regular RGB space\n   */\n  private static trueDelinearized(rgbComponent: number): number {\n    const normalized = rgbComponent / 100.0;\n    let delinearized = 0.0;\n    if (normalized <= 0.0031308) {\n      delinearized = normalized * 12.92;\n    } else {\n      delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n    }\n    return delinearized * 255.0;\n  }\n\n  private static chromaticAdaptation(component: number): number {\n    const af = Math.pow(Math.abs(component), 0.42);\n    return mathUtils.signum(component) * 400.0 * af / (af + 27.13);\n  }\n\n  /**\n   * Returns the hue of a linear RGB color in CAM16.\n   *\n   * @param linrgb The linear RGB coordinates of a color.\n   * @return The hue of the color in CAM16, in radians.\n   */\n  private static hueOf(linrgb: number[]): number {\n    const scaledDiscount =\n        mathUtils.matrixMultiply(linrgb, HctSolver.SCALED_DISCOUNT_FROM_LINRGB);\n    const rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);\n    const gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);\n    const bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);\n    // redness-greenness\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    // yellowness-blueness\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n    return Math.atan2(b, a);\n  }\n\n  private static areInCyclicOrder(a: number, b: number, c: number): boolean {\n    const deltaAB = HctSolver.sanitizeRadians(b - a);\n    const deltaAC = HctSolver.sanitizeRadians(c - a);\n    return deltaAB < deltaAC;\n  }\n\n  /**\n   * Solves the lerp equation.\n   *\n   * @param source The starting number.\n   * @param mid The number in the middle.\n   * @param target The ending number.\n   * @return A number t such that lerp(source, target, t) = mid.\n   */\n  private static intercept(source: number, mid: number, target: number):\n      number {\n    return (mid - source) / (target - source);\n  }\n\n  private static lerpPoint(source: number[], t: number, target: number[]):\n      number[] {\n    return [\n      source[0] + (target[0] - source[0]) * t,\n      source[1] + (target[1] - source[1]) * t,\n      source[2] + (target[2] - source[2]) * t,\n    ];\n  }\n\n  /**\n   * Intersects a segment with a plane.\n   *\n   * @param source The coordinates of point A.\n   * @param coordinate The R-, G-, or B-coordinate of the plane.\n   * @param target The coordinates of point B.\n   * @param axis The axis the plane is perpendicular with. (0: R, 1:\n   * G, 2: B)\n   * @return The intersection point of the segment AB with the plane\n   * R=coordinate, G=coordinate, or B=coordinate\n   */\n  private static setCoordinate(\n      source: number[],\n      coordinate: number,\n      target: number[],\n      axis: number,\n      ): number[] {\n    const t = HctSolver.intercept(source[axis], coordinate, target[axis]);\n    return HctSolver.lerpPoint(source, t, target);\n  }\n\n  private static isBounded(x: number): boolean {\n    return 0.0 <= x && x <= 100.0;\n  }\n\n  /**\n   * Returns the nth possible vertex of the polygonal intersection.\n   *\n   * @param y The Y value of the plane.\n   * @param n The zero-based index of the point. 0 <= n <= 11.\n   * @return The nth possible vertex of the polygonal intersection\n   * of the y plane and the RGB cube, in linear RGB coordinates, if\n   * it exists. If this possible vertex lies outside of the cube,\n   * [-1.0, -1.0, -1.0] is returned.\n   */\n  private static nthVertex(y: number, n: number): number[] {\n    const kR = HctSolver.Y_FROM_LINRGB[0];\n    const kG = HctSolver.Y_FROM_LINRGB[1];\n    const kB = HctSolver.Y_FROM_LINRGB[2];\n    const coordA = n % 4 <= 1 ? 0.0 : 100.0;\n    const coordB = n % 2 === 0 ? 0.0 : 100.0;\n    if (n < 4) {\n      const g = coordA;\n      const b = coordB;\n      const r = (y - g * kG - b * kB) / kR;\n      if (HctSolver.isBounded(r)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    } else if (n < 8) {\n      const b = coordA;\n      const r = coordB;\n      const g = (y - r * kR - b * kB) / kG;\n      if (HctSolver.isBounded(g)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    } else {\n      const r = coordA;\n      const g = coordB;\n      const b = (y - r * kR - g * kG) / kB;\n      if (HctSolver.isBounded(b)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    }\n  }\n\n  /**\n   * Finds the segment containing the desired color.\n   *\n   * @param y The Y value of the color.\n   * @param targetHue The hue of the color.\n   * @return A list of two sets of linear RGB coordinates, each\n   * corresponding to an endpoint of the segment containing the\n   * desired color.\n   */\n  private static bisectToSegment(y: number, targetHue: number): number[][] {\n    let left = [-1.0, -1.0, -1.0];\n    let right = left;\n    let leftHue = 0.0;\n    let rightHue = 0.0;\n    let initialized = false;\n    let uncut = true;\n    for (let n = 0; n < 12; n++) {\n      const mid = HctSolver.nthVertex(y, n);\n      if (mid[0] < 0) {\n        continue;\n      }\n      const midHue = HctSolver.hueOf(mid);\n      if (!initialized) {\n        left = mid;\n        right = mid;\n        leftHue = midHue;\n        rightHue = midHue;\n        initialized = true;\n        continue;\n      }\n      if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {\n        uncut = false;\n        if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n          right = mid;\n          rightHue = midHue;\n        } else {\n          left = mid;\n          leftHue = midHue;\n        }\n      }\n    }\n    return [left, right];\n  }\n\n  private static midpoint(a: number[], b: number[]): number[] {\n    return [\n      (a[0] + b[0]) / 2,\n      (a[1] + b[1]) / 2,\n      (a[2] + b[2]) / 2,\n    ];\n  }\n\n  private static criticalPlaneBelow(x: number): number {\n    return Math.floor(x - 0.5);\n  }\n\n  private static criticalPlaneAbove(x: number): number {\n    return Math.ceil(x - 0.5);\n  }\n\n  /**\n   * Finds a color with the given Y and hue on the boundary of the\n   * cube.\n   *\n   * @param y The Y value of the color.\n   * @param targetHue The hue of the color.\n   * @return The desired color, in linear RGB coordinates.\n   */\n  private static bisectToLimit(y: number, targetHue: number): number[] {\n    const segment = HctSolver.bisectToSegment(y, targetHue);\n    let left = segment[0];\n    let leftHue = HctSolver.hueOf(left);\n    let right = segment[1];\n    for (let axis = 0; axis < 3; axis++) {\n      if (left[axis] !== right[axis]) {\n        let lPlane = -1;\n        let rPlane = 255;\n        if (left[axis] < right[axis]) {\n          lPlane = HctSolver.criticalPlaneBelow(\n              HctSolver.trueDelinearized(left[axis]));\n          rPlane = HctSolver.criticalPlaneAbove(\n              HctSolver.trueDelinearized(right[axis]));\n        } else {\n          lPlane = HctSolver.criticalPlaneAbove(\n              HctSolver.trueDelinearized(left[axis]));\n          rPlane = HctSolver.criticalPlaneBelow(\n              HctSolver.trueDelinearized(right[axis]));\n        }\n        for (let i = 0; i < 8; i++) {\n          if (Math.abs(rPlane - lPlane) <= 1) {\n            break;\n          } else {\n            const mPlane = Math.floor((lPlane + rPlane) / 2.0);\n            const midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];\n            const mid =\n                HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);\n            const midHue = HctSolver.hueOf(mid);\n            if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n              right = mid;\n              rPlane = mPlane;\n            } else {\n              left = mid;\n              leftHue = midHue;\n              lPlane = mPlane;\n            }\n          }\n        }\n      }\n    }\n    return HctSolver.midpoint(left, right);\n  }\n\n  private static inverseChromaticAdaptation(adapted: number): number {\n    const adaptedAbs = Math.abs(adapted);\n    const base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));\n    return mathUtils.signum(adapted) * Math.pow(base, 1.0 / 0.42);\n  }\n\n  /**\n   * Finds a color with the given hue, chroma, and Y.\n   *\n   * @param hueRadians The desired hue in radians.\n   * @param chroma The desired chroma.\n   * @param y The desired Y.\n   * @return The desired color as a hexadecimal integer, if found; 0\n   * otherwise.\n   */\n  private static findResultByJ(hueRadians: number, chroma: number, y: number):\n      number {\n    // Initial estimate of j.\n    let j = Math.sqrt(y) * 11.0;\n    // ===========================================================\n    // Operations inlined from Cam16 to avoid repeated calculation\n    // ===========================================================\n    const viewingConditions = ViewingConditions.DEFAULT;\n    const tInnerCoeff =\n        1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    const eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);\n    const p1 =\n        eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n    const hSin = Math.sin(hueRadians);\n    const hCos = Math.cos(hueRadians);\n    for (let iterationRound = 0; iterationRound < 5; iterationRound++) {\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      const jNormalized = j / 100.0;\n      const alpha =\n          chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);\n      const t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);\n      const ac = viewingConditions.aw *\n          Math.pow(\n              jNormalized,\n              1.0 / viewingConditions.c / viewingConditions.z,\n          );\n      const p2 = ac / viewingConditions.nbb;\n      const gamma = 23.0 * (p2 + 0.305) * t /\n          (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n      const a = gamma * hCos;\n      const b = gamma * hSin;\n      const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n      const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n      const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n      const rCScaled = HctSolver.inverseChromaticAdaptation(rA);\n      const gCScaled = HctSolver.inverseChromaticAdaptation(gA);\n      const bCScaled = HctSolver.inverseChromaticAdaptation(bA);\n      const linrgb = mathUtils.matrixMultiply(\n          [rCScaled, gCScaled, bCScaled],\n          HctSolver.LINRGB_FROM_SCALED_DISCOUNT,\n      );\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {\n        return 0;\n      }\n      const kR = HctSolver.Y_FROM_LINRGB[0];\n      const kG = HctSolver.Y_FROM_LINRGB[1];\n      const kB = HctSolver.Y_FROM_LINRGB[2];\n      const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];\n      if (fnj <= 0) {\n        return 0;\n      }\n      if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {\n        if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {\n          return 0;\n        }\n        return colorUtils.argbFromLinrgb(linrgb);\n      }\n      // Iterates with Newton method,\n      // Using 2 * fn(j) / j as the approximation of fn'(j)\n      j = j - (fnj - y) * j / (2 * fnj);\n    }\n    return 0;\n  }\n\n  /**\n   * Finds an sRGB color with the given hue, chroma, and L*, if\n   * possible.\n   *\n   * @param hueDegrees The desired hue, in degrees.\n   * @param chroma The desired chroma.\n   * @param lstar The desired L*.\n   * @return A hexadecimal representing the sRGB color. The color\n   * has sufficiently close hue, chroma, and L* to the desired\n   * values, if possible; otherwise, the hue and L* will be\n   * sufficiently close, and chroma will be maximized.\n   */\n  static solveToInt(hueDegrees: number, chroma: number, lstar: number): number {\n    if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {\n      return colorUtils.argbFromLstar(lstar);\n    }\n    hueDegrees = mathUtils.sanitizeDegreesDouble(hueDegrees);\n    const hueRadians = hueDegrees / 180 * Math.PI;\n    const y = colorUtils.yFromLstar(lstar);\n    const exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);\n    if (exactAnswer !== 0) {\n      return exactAnswer;\n    }\n    const linrgb = HctSolver.bisectToLimit(y, hueRadians);\n    return colorUtils.argbFromLinrgb(linrgb);\n  }\n\n  /**\n   * Finds an sRGB color with the given hue, chroma, and L*, if\n   * possible.\n   *\n   * @param hueDegrees The desired hue, in degrees.\n   * @param chroma The desired chroma.\n   * @param lstar The desired L*.\n   * @return An CAM16 object representing the sRGB color. The color\n   * has sufficiently close hue, chroma, and L* to the desired\n   * values, if possible; otherwise, the hue and L* will be\n   * sufficiently close, and chroma will be maximized.\n   */\n  static solveToCam(hueDegrees: number, chroma: number, lstar: number): Cam16 {\n    return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A color system built using CAM16 hue and chroma, and L* from\n * L*a*b*.\n *\n * Using L* creates a link between the color system, contrast, and thus\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\n * color space. L*, or perceptual luminance can be calculated from Y.\n *\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\n * accurate color tones.\n *\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\n */\n\nimport * as utils from '../utils/color_utils.js';\n\nimport {Cam16} from './cam16.js';\nimport {HctSolver} from './hct_solver.js';\nimport {ViewingConditions} from './viewing_conditions.js';\n\n\n/**\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\n * accurate color measurement system that can also accurately render what colors\n * will appear as in different lighting environments.\n */\nexport class Hct {\n  /**\n   * @param hue 0 <= hue < 360; invalid values are corrected.\n   * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color\n   *     returned may be lower than the requested chroma. Chroma has a different\n   *     maximum for any given hue and tone.\n   * @param tone 0 <= tone <= 100; invalid values are corrected.\n   * @return HCT representation of a color in default viewing conditions.\n   */\n\n  internalHue: number;\n  internalChroma: number;\n  internalTone: number;\n\n  static from(hue: number, chroma: number, tone: number) {\n    return new Hct(HctSolver.solveToInt(hue, chroma, tone));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return HCT representation of a color in default viewing conditions\n   */\n  static fromInt(argb: number) {\n    return new Hct(argb);\n  }\n\n  toInt(): number {\n    return this.argb;\n  }\n\n  /**\n   * A number, in degrees, representing ex. red, orange, yellow, etc.\n   * Ranges from 0 <= hue < 360.\n   */\n  get hue(): number {\n    return this.internalHue;\n  }\n\n  /**\n   * @param newHue 0 <= newHue < 360; invalid values are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set hue(newHue: number) {\n    this.setInternalState(\n        HctSolver.solveToInt(\n            newHue,\n            this.internalChroma,\n            this.internalTone,\n            ),\n    );\n  }\n\n  get chroma(): number {\n    return this.internalChroma;\n  }\n\n  /**\n   * @param newChroma 0 <= newChroma < ?\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set chroma(newChroma: number) {\n    this.setInternalState(\n        HctSolver.solveToInt(\n            this.internalHue,\n            newChroma,\n            this.internalTone,\n            ),\n    );\n  }\n\n  /** Lightness. Ranges from 0 to 100. */\n  get tone(): number {\n    return this.internalTone;\n  }\n\n  /**\n   * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set tone(newTone: number) {\n    this.setInternalState(\n        HctSolver.solveToInt(\n            this.internalHue,\n            this.internalChroma,\n            newTone,\n            ),\n    );\n  }\n\n  private constructor(private argb: number) {\n    const cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n\n  private setInternalState(argb: number) {\n    const cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n\n  /**\n   * Translates a color into different [ViewingConditions].\n   *\n   * Colors change appearance. They look different with lights on versus off,\n   * the same color, as in hex code, on white looks different when on black.\n   * This is called color relativity, most famously explicated by Josef Albers\n   * in Interaction of Color.\n   *\n   * In color science, color appearance models can account for this and\n   * calculate the appearance of a color in different settings. HCT is based on\n   * CAM16, a color appearance model, and uses it to make these calculations.\n   *\n   * See [ViewingConditions.make] for parameters affecting color appearance.\n   */\n  inViewingConditions(vc: ViewingConditions): Hct {\n    // 1. Use CAM16 to find XYZ coordinates of color in specified VC.\n    const cam = Cam16.fromInt(this.toInt());\n    const viewedInVc = cam.xyzInViewingConditions(vc);\n\n    // 2. Create CAM16 of those XYZ coordinates in default VC.\n    const recastInVc = Cam16.fromXyzInViewingConditions(\n        viewedInVc[0],\n        viewedInVc[1],\n        viewedInVc[2],\n        ViewingConditions.make(),\n    );\n\n    // 3. Create HCT from:\n    // - CAM16 using default VC with XYZ coordinates in specified VC.\n    // - L* converted from Y in XYZ coordinates in specified VC.\n    const recastHct = Hct.from(\n        recastInVc.hue,\n        recastInVc.chroma,\n        utils.lstarFromY(viewedInVc[1]),\n    );\n    return recastHct;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport {Cam16} from '../hct/cam16.js';\nimport {Hct} from '../hct/hct.js';\nimport * as colorUtils from '../utils/color_utils.js';\nimport * as mathUtils from '../utils/math_utils.js';\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\n/**\n * Functions for blending in HCT and CAM16.\n */\nexport class Blend {\n  /**\n   * Blend the design color's HCT hue towards the key color's HCT\n   * hue, in a way that leaves the original color recognizable and\n   * recognizably shifted towards the key color.\n   *\n   * @param designColor ARGB representation of an arbitrary color.\n   * @param sourceColor ARGB representation of the main theme color.\n   * @return The design color with a hue shifted towards the\n   * system's color, a slightly warmer/cooler variant of the design\n   * color's hue.\n   */\n  static harmonize(designColor: number, sourceColor: number): number {\n    const fromHct = Hct.fromInt(designColor);\n    const toHct = Hct.fromInt(sourceColor);\n    const differenceDegrees =\n        mathUtils.differenceDegrees(fromHct.hue, toHct.hue);\n    const rotationDegrees = Math.min(differenceDegrees * 0.5, 15.0);\n    const outputHue = mathUtils.sanitizeDegreesDouble(\n        fromHct.hue +\n        rotationDegrees * mathUtils.rotationDirection(fromHct.hue, toHct.hue));\n    return Hct.from(outputHue, fromHct.chroma, fromHct.tone).toInt();\n  }\n\n  /**\n   * Blends hue from one color into another. The chroma and tone of\n   * the original color are maintained.\n   *\n   * @param from ARGB representation of color\n   * @param to ARGB representation of color\n   * @param amount how much blending to perform; 0.0 >= and <= 1.0\n   * @return from, with a hue blended towards to. Chroma and tone\n   * are constant.\n   */\n  static hctHue(from: number, to: number, amount: number): number {\n    const ucs = Blend.cam16Ucs(from, to, amount);\n    const ucsCam = Cam16.fromInt(ucs);\n    const fromCam = Cam16.fromInt(from);\n    const blended = Hct.from(\n        ucsCam.hue,\n        fromCam.chroma,\n        colorUtils.lstarFromArgb(from),\n    );\n    return blended.toInt();\n  }\n\n  /**\n   * Blend in CAM16-UCS space.\n   *\n   * @param from ARGB representation of color\n   * @param to ARGB representation of color\n   * @param amount how much blending to perform; 0.0 >= and <= 1.0\n   * @return from, blended towards to. Hue, chroma, and tone will\n   * change.\n   */\n  static cam16Ucs(from: number, to: number, amount: number): number {\n    const fromCam = Cam16.fromInt(from);\n    const toCam = Cam16.fromInt(to);\n    const fromJ = fromCam.jstar;\n    const fromA = fromCam.astar;\n    const fromB = fromCam.bstar;\n    const toJ = toCam.jstar;\n    const toA = toCam.astar;\n    const toB = toCam.bstar;\n    const jstar = fromJ + (toJ - fromJ) * amount;\n    const astar = fromA + (toA - fromA) * amount;\n    const bstar = fromB + (toB - fromB) * amount;\n    return Cam16.fromUcs(jstar, astar, bstar).toInt();\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\nimport * as utils from '../utils/color_utils.js';\nimport * as math from '../utils/math_utils.js';\n\n/**\n * Utility methods for calculating contrast given two colors, or calculating a\n * color given one color and a contrast ratio.\n *\n * Contrast ratio is calculated using XYZ's Y. When linearized to match human\n * perception, Y becomes HCT's tone and L*a*b*'s' L*. Informally, this is the\n * lightness of a color.\n *\n * Methods refer to tone, T in the the HCT color space.\n * Tone is equivalent to L* in the L*a*b* color space, or L in the LCH color\n * space.\n */\nexport class Contrast {\n  /**\n   * Returns a contrast ratio, which ranges from 1 to 21.\n   *\n   * @param toneA Tone between 0 and 100. Values outside will be clamped.\n   * @param toneB Tone between 0 and 100. Values outside will be clamped.\n   */\n  static ratioOfTones(toneA: number, toneB: number): number {\n    toneA = math.clampDouble(0.0, 100.0, toneA);\n    toneB = math.clampDouble(0.0, 100.0, toneB);\n    return Contrast.ratioOfYs(utils.yFromLstar(toneA), utils.yFromLstar(toneB));\n  }\n\n  static ratioOfYs(y1: number, y2: number): number {\n    const lighter = y1 > y2 ? y1 : y2;\n    const darker = (lighter === y2) ? y1 : y2;\n    return (lighter + 5.0) / (darker + 5.0);\n  }\n\n  /**\n   * Returns a tone >= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns -1 if ratio cannot be achieved with tone parameter.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in -1 being returned.\n   * @param ratio Contrast ratio of return value and tone.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static lighter(tone: number, ratio: number): number {\n    if (tone < 0.0 || tone > 100.0) {\n      return -1.0;\n    }\n\n    const darkY = utils.yFromLstar(tone);\n    const lightY = ratio * (darkY + 5.0) - 5.0;\n    const realContrast = Contrast.ratioOfYs(lightY, darkY);\n    const delta = Math.abs(realContrast - ratio);\n    if (realContrast < ratio && delta > 0.04) {\n      return -1;\n    }\n\n    // Ensure gamut mapping, which requires a 'range' on tone, will still result\n    // the correct ratio by darkening slightly.\n    const returnValue = utils.lstarFromY(lightY) + 0.4;\n    if (returnValue < 0 || returnValue > 100) {\n      return -1;\n    }\n    return returnValue;\n  }\n\n  /**\n   * Returns a tone <= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns -1 if ratio cannot be achieved with tone parameter.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in -1 being returned.\n   * @param ratio Contrast ratio of return value and tone.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static darker(tone: number, ratio: number): number {\n    if (tone < 0.0 || tone > 100.0) {\n      return -1.0;\n    }\n\n    const lightY = utils.yFromLstar(tone);\n    const darkY = ((lightY + 5.0) / ratio) - 5.0;\n    const realContrast = Contrast.ratioOfYs(lightY, darkY);\n\n    const delta = Math.abs(realContrast - ratio);\n    if (realContrast < ratio && delta > 0.04) {\n      return -1;\n    }\n\n    // Ensure gamut mapping, which requires a 'range' on tone, will still result\n    // the correct ratio by darkening slightly.\n    const returnValue = utils.lstarFromY(darkY) - 0.4;\n    if (returnValue < 0 || returnValue > 100) {\n      return -1;\n    }\n    return returnValue;\n  }\n\n  /**\n   * Returns a tone >= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns 100 if ratio cannot be achieved with tone parameter.\n   *\n   * This method is unsafe because the returned value is guaranteed to be in\n   * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n   * the ratio with tone. For example, there is no color lighter than T100.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in 100 being returned.\n   * @param ratio Desired contrast ratio of return value and tone parameter.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static lighterUnsafe(tone: number, ratio: number): number {\n    const lighterSafe = Contrast.lighter(tone, ratio);\n    return (lighterSafe < 0.0) ? 100.0 : lighterSafe;\n  }\n\n  /**\n   * Returns a tone >= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns 100 if ratio cannot be achieved with tone parameter.\n   *\n   * This method is unsafe because the returned value is guaranteed to be in\n   * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n   * the [ratio with [tone]. For example, there is no color darker than T0.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in 0 being returned.\n   * @param ratio Desired contrast ratio of return value and tone parameter.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static darkerUnsafe(tone: number, ratio: number): number {\n    const darkerSafe = Contrast.darker(tone, ratio);\n    return (darkerSafe < 0.0) ? 0.0 : darkerSafe;\n  }\n}", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct.js';\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\n/**\n * Check and/or fix universally disliked colors.\n * Color science studies of color preference indicate universal distaste for\n * dark yellow-greens, and also show this is correlated to distate for\n * biological waste and rotting food.\n *\n * See Palmer and Schloss, 2010 or Schloss and Palmer's Chapter 21 in Handbook\n * of Color Psychology (2015).\n */\nexport class DislikeAnalyzer {\n  /**\n   * Returns true if a color is disliked.\n   *\n   * @param hct A color to be judged.\n   * @return Whether the color is disliked.\n   *\n   * Disliked is defined as a dark yellow-green that is not neutral.\n   */\n  static isDisliked(hct: Hct): boolean {\n    const huePasses =\n        Math.round(hct.hue) >= 90.0 && Math.round(hct.hue) <= 111.0;\n    const chromaPasses = Math.round(hct.chroma) > 16.0;\n    const tonePasses = Math.round(hct.tone) < 65.0;\n\n    return huePasses && chromaPasses && tonePasses;\n  }\n\n  /**\n   * If a color is disliked, lighten it to make it likable.\n   *\n   * @param hct A color to be judged.\n   * @return A new color if the original color is disliked, or the original\n   *   color if it is acceptable.\n   */\n  static fixIfDisliked(hct: Hct): Hct {\n    if (DislikeAnalyzer.isDisliked(hct)) {\n      return Hct.from(\n          hct.hue,\n          hct.chroma,\n          70.0,\n      );\n    }\n\n    return hct;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Contrast} from '../contrast/contrast.js';\nimport {Hct} from '../hct/hct.js';\nimport {TonalPalette} from '../palettes/tonal_palette.js';\nimport {DynamicScheme} from '../scheme/dynamic_scheme.js';\nimport * as math from '../utils/math_utils.js';\n\nimport {ContrastCurve} from './contrast_curve.js';\nimport {ToneDeltaPair} from './tone_delta_pair.js';\n\n/**\n * @param name The name of the dynamic color. Defaults to empty.\n * @param palette Function that provides a TonalPalette given\n * DynamicScheme. A TonalPalette is defined by a hue and chroma, so this\n * replaces the need to specify hue/chroma. By providing a tonal palette, when\n * contrast adjustments are made, intended chroma can be preserved.\n * @param tone Function that provides a tone given DynamicScheme.\n * @param isBackground Whether this dynamic color is a background, with\n * some other color as the foreground. Defaults to false.\n * @param background The background of the dynamic color (as a function of a\n *     `DynamicScheme`), if it exists.\n * @param secondBackground A second background of the dynamic color (as a\n *     function of a `DynamicScheme`), if it\n * exists.\n * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n * against its background should behave in various contrast levels options.\n * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n * constraint between two colors. One of them must be the color being\n * constructed.\n */\ninterface FromPaletteOptions {\n  name?: string;\n  palette: (scheme: DynamicScheme) => TonalPalette;\n  tone: (scheme: DynamicScheme) => number;\n  isBackground?: boolean;\n  background?: (scheme: DynamicScheme) => DynamicColor;\n  secondBackground?: (scheme: DynamicScheme) => DynamicColor;\n  contrastCurve?: ContrastCurve;\n  toneDeltaPair?: (scheme: DynamicScheme) => ToneDeltaPair;\n}\n\n/**\n * A color that adjusts itself based on UI state provided by DynamicScheme.\n *\n * Colors without backgrounds do not change tone when contrast changes. Colors\n * with backgrounds become closer to their background as contrast lowers, and\n * further when contrast increases.\n *\n * Prefer static constructors. They require either a hexcode, a palette and\n * tone, or a hue and chroma. Optionally, they can provide a background\n * DynamicColor.\n */\nexport class DynamicColor {\n  private readonly hctCache = new Map<DynamicScheme, Hct>();\n\n  /**\n   * Create a DynamicColor defined by a TonalPalette and HCT tone.\n   *\n   * @param args Functions with DynamicScheme as input. Must provide a palette\n   * and tone. May provide a background DynamicColor and ToneDeltaConstraint.\n   */\n  static fromPalette(args: FromPaletteOptions): DynamicColor {\n    return new DynamicColor(\n        args.name ?? '',\n        args.palette,\n        args.tone,\n        args.isBackground ?? false,\n        args.background,\n        args.secondBackground,\n        args.contrastCurve,\n        args.toneDeltaPair,\n    );\n  }\n\n  /**\n   * The base constructor for DynamicColor.\n   *\n   * _Strongly_ prefer using one of the convenience constructors. This class is\n   * arguably too flexible to ensure it can support any scenario. Functional\n   * arguments allow  overriding without risks that come with subclasses.\n   *\n   * For example, the default behavior of adjust tone at max contrast\n   * to be at a 7.0 ratio with its background is principled and\n   * matches accessibility guidance. That does not mean it's the desired\n   * approach for _every_ design system, and every color pairing,\n   * always, in every case.\n   *\n   * @param name The name of the dynamic color. Defaults to empty.\n   * @param palette Function that provides a TonalPalette given\n   * DynamicScheme. A TonalPalette is defined by a hue and chroma, so this\n   * replaces the need to specify hue/chroma. By providing a tonal palette, when\n   * contrast adjustments are made, intended chroma can be preserved.\n   * @param tone Function that provides a tone, given a DynamicScheme.\n   * @param isBackground Whether this dynamic color is a background, with\n   * some other color as the foreground. Defaults to false.\n   * @param background The background of the dynamic color (as a function of a\n   *     `DynamicScheme`), if it exists.\n   * @param secondBackground A second background of the dynamic color (as a\n   *     function of a `DynamicScheme`), if it\n   * exists.\n   * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n   * against its background should behave in various contrast levels options.\n   * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n   * constraint between two colors. One of them must be the color being\n   * constructed.\n   */\n  constructor(\n      readonly name: string,\n      readonly palette: (scheme: DynamicScheme) => TonalPalette,\n      readonly tone: (scheme: DynamicScheme) => number,\n      readonly isBackground: boolean,\n      readonly background?: (scheme: DynamicScheme) => DynamicColor,\n      readonly secondBackground?: (scheme: DynamicScheme) => DynamicColor,\n      readonly contrastCurve?: ContrastCurve,\n      readonly toneDeltaPair?: (scheme: DynamicScheme) => ToneDeltaPair,\n  ) {\n    if ((!background) && secondBackground) {\n      throw new Error(\n          `Color ${name} has secondBackground` +\n          `defined, but background is not defined.`);\n    }\n    if ((!background) && contrastCurve) {\n      throw new Error(\n          `Color ${name} has contrastCurve` +\n          `defined, but background is not defined.`);\n    }\n    if (background && !contrastCurve) {\n      throw new Error(\n          `Color ${name} has background` +\n          `defined, but contrastCurve is not defined.`);\n    }\n  }\n\n  /**\n   * Return a ARGB integer (i.e. a hex code).\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getArgb(scheme: DynamicScheme): number {\n    return this.getHct(scheme).toInt();\n  }\n\n  /**\n   * Return a color, expressed in the HCT color space, that this\n   * DynamicColor is under the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getHct(scheme: DynamicScheme): Hct {\n    const cachedAnswer = this.hctCache.get(scheme);\n    if (cachedAnswer != null) {\n      return cachedAnswer;\n    }\n    const tone = this.getTone(scheme);\n    const answer = this.palette(scheme).getHct(tone);\n    if (this.hctCache.size > 4) {\n      this.hctCache.clear();\n    }\n    this.hctCache.set(scheme, answer);\n    return answer;\n  }\n\n  /**\n   * Return a tone, T in the HCT color space, that this DynamicColor is under\n   * the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getTone(scheme: DynamicScheme): number {\n    const decreasingContrast = scheme.contrastLevel < 0;\n\n    // Case 1: dual foreground, pair of colors with delta constraint.\n    if (this.toneDeltaPair) {\n      const toneDeltaPair = this.toneDeltaPair(scheme);\n      const roleA = toneDeltaPair.roleA;\n      const roleB = toneDeltaPair.roleB;\n      const delta = toneDeltaPair.delta;\n      const polarity = toneDeltaPair.polarity;\n      const stayTogether = toneDeltaPair.stayTogether;\n\n      const bg = this.background!(scheme);\n      const bgTone = bg.getTone(scheme);\n\n      const aIsNearer =\n          (polarity === 'nearer' ||\n           (polarity === 'lighter' && !scheme.isDark) ||\n           (polarity === 'darker' && scheme.isDark));\n      const nearer = aIsNearer ? roleA : roleB;\n      const farther = aIsNearer ? roleB : roleA;\n      const amNearer = this.name === nearer.name;\n      const expansionDir = scheme.isDark ? 1 : -1;\n\n      // 1st round: solve to min, each\n      const nContrast = nearer.contrastCurve!.getContrast(scheme.contrastLevel);\n      const fContrast =\n          farther.contrastCurve!.getContrast(scheme.contrastLevel);\n\n      // If a color is good enough, it is not adjusted.\n      // Initial and adjusted tones for `nearer`\n      const nInitialTone = nearer.tone(scheme);\n      let nTone = Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast ?\n          nInitialTone :\n          DynamicColor.foregroundTone(bgTone, nContrast);\n      // Initial and adjusted tones for `farther`\n      const fInitialTone = farther.tone(scheme);\n      let fTone = Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast ?\n          fInitialTone :\n          DynamicColor.foregroundTone(bgTone, fContrast);\n\n      if (decreasingContrast) {\n        // If decreasing contrast, adjust color to the \"bare minimum\"\n        // that satisfies contrast.\n        nTone = DynamicColor.foregroundTone(bgTone, nContrast);\n        fTone = DynamicColor.foregroundTone(bgTone, fContrast);\n      }\n\n      if ((fTone - nTone) * expansionDir >= delta) {\n        // Good! Tones satisfy the constraint; no change needed.\n      } else {\n        // 2nd round: expand farther to match delta.\n        fTone = math.clampDouble(0, 100, nTone + delta * expansionDir);\n        if ((fTone - nTone) * expansionDir >= delta) {\n          // Good! Tones now satisfy the constraint; no change needed.\n        } else {\n          // 3rd round: contract nearer to match delta.\n          nTone = math.clampDouble(0, 100, fTone - delta * expansionDir);\n        }\n      }\n\n      // Avoids the 50-59 awkward zone.\n      if (50 <= nTone && nTone < 60) {\n        // If `nearer` is in the awkward zone, move it away, together with\n        // `farther`.\n        if (expansionDir > 0) {\n          nTone = 60;\n          fTone = Math.max(fTone, nTone + delta * expansionDir);\n        } else {\n          nTone = 49;\n          fTone = Math.min(fTone, nTone + delta * expansionDir);\n        }\n      } else if (50 <= fTone && fTone < 60) {\n        if (stayTogether) {\n          // Fixes both, to avoid two colors on opposite sides of the \"awkward\n          // zone\".\n          if (expansionDir > 0) {\n            nTone = 60;\n            fTone = Math.max(fTone, nTone + delta * expansionDir);\n          } else {\n            nTone = 49;\n            fTone = Math.min(fTone, nTone + delta * expansionDir);\n          }\n        } else {\n          // Not required to stay together; fixes just one.\n          if (expansionDir > 0) {\n            fTone = 60;\n          } else {\n            fTone = 49;\n          }\n        }\n      }\n\n      // Returns `nTone` if this color is `nearer`, otherwise `fTone`.\n      return amNearer ? nTone : fTone;\n    }\n\n    else {\n      // Case 2: No contrast pair; just solve for itself.\n      let answer = this.tone(scheme);\n\n      if (this.background == null) {\n        return answer;  // No adjustment for colors with no background.\n      }\n\n      const bgTone = this.background(scheme).getTone(scheme);\n\n      const desiredRatio =\n          this.contrastCurve!.getContrast(scheme.contrastLevel);\n\n      if (Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {\n        // Don't \"improve\" what's good enough.\n      } else {\n        // Rough improvement.\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      }\n\n      if (decreasingContrast) {\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      }\n\n      if (this.isBackground && 50 <= answer && answer < 60) {\n        // Must adjust\n        if (Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {\n          answer = 49;\n        } else {\n          answer = 60;\n        }\n      }\n\n      if (this.secondBackground) {\n        // Case 3: Adjust for dual backgrounds.\n\n        const [bg1, bg2] = [this.background, this.secondBackground];\n        const [bgTone1, bgTone2] =\n            [bg1(scheme).getTone(scheme), bg2(scheme).getTone(scheme)];\n        const [upper, lower] =\n            [Math.max(bgTone1, bgTone2), Math.min(bgTone1, bgTone2)];\n\n        if (Contrast.ratioOfTones(upper, answer) >= desiredRatio &&\n            Contrast.ratioOfTones(lower, answer) >= desiredRatio) {\n          return answer;\n        }\n\n        // The darkest light tone that satisfies the desired ratio,\n        // or -1 if such ratio cannot be reached.\n        const lightOption = Contrast.lighter(upper, desiredRatio);\n\n        // The lightest dark tone that satisfies the desired ratio,\n        // or -1 if such ratio cannot be reached.\n        const darkOption = Contrast.darker(lower, desiredRatio);\n\n        // Tones suitable for the foreground.\n        const availables = [];\n        if (lightOption !== -1) availables.push(lightOption);\n        if (darkOption !== -1) availables.push(darkOption);\n\n        const prefersLight = DynamicColor.tonePrefersLightForeground(bgTone1) ||\n            DynamicColor.tonePrefersLightForeground(bgTone2);\n        if (prefersLight) {\n          return (lightOption < 0) ? 100 : lightOption;\n        }\n        if (availables.length === 1) {\n          return availables[0];\n        }\n        return (darkOption < 0) ? 0 : darkOption;\n      }\n\n      return answer;\n    }\n  }\n\n  /**\n   * Given a background tone, find a foreground tone, while ensuring they reach\n   * a contrast ratio that is as close to [ratio] as possible.\n   *\n   * @param bgTone Tone in HCT. Range is 0 to 100, undefined behavior when it\n   *     falls outside that range.\n   * @param ratio The contrast ratio desired between bgTone and the return\n   *     value.\n   */\n  static foregroundTone(bgTone: number, ratio: number): number {\n    const lighterTone = Contrast.lighterUnsafe(bgTone, ratio);\n    const darkerTone = Contrast.darkerUnsafe(bgTone, ratio);\n    const lighterRatio = Contrast.ratioOfTones(lighterTone, bgTone);\n    const darkerRatio = Contrast.ratioOfTones(darkerTone, bgTone);\n    const preferLighter = DynamicColor.tonePrefersLightForeground(bgTone);\n\n    if (preferLighter) {\n      // This handles an edge case where the initial contrast ratio is high\n      // (ex. 13.0), and the ratio passed to the function is that high\n      // ratio, and both the lighter and darker ratio fails to pass that\n      // ratio.\n      //\n      // This was observed with Tonal Spot's On Primary Container turning\n      // black momentarily between high and max contrast in light mode. PC's\n      // standard tone was T90, OPC's was T10, it was light mode, and the\n      // contrast value was 0.6568521221032331.\n      const negligibleDifference = Math.abs(lighterRatio - darkerRatio) < 0.1 &&\n          lighterRatio < ratio && darkerRatio < ratio;\n      return lighterRatio >= ratio || lighterRatio >= darkerRatio ||\n              negligibleDifference ?\n          lighterTone :\n          darkerTone;\n    } else {\n      return darkerRatio >= ratio || darkerRatio >= lighterRatio ? darkerTone :\n                                                                   lighterTone;\n    }\n  }\n\n  /**\n   * Returns whether [tone] prefers a light foreground.\n   *\n   * People prefer white foregrounds on ~T60-70. Observed over time, and also\n   * by Andrew Somers during research for APCA.\n   *\n   * T60 used as to create the smallest discontinuity possible when skipping\n   * down to T49 in order to ensure light foregrounds.\n   * Since `tertiaryContainer` in dark monochrome scheme requires a tone of\n   * 60, it should not be adjusted. Therefore, 60 is excluded here.\n   */\n  static tonePrefersLightForeground(tone: number): boolean {\n    return Math.round(tone) < 60.0;\n  }\n\n  /**\n   * Returns whether [tone] can reach a contrast ratio of 4.5 with a lighter\n   * color.\n   */\n  static toneAllowsLightForeground(tone: number): boolean {\n    return Math.round(tone) <= 49.0;\n  }\n\n  /**\n   * Adjust a tone such that white has 4.5 contrast, if the tone is\n   * reasonably close to supporting it.\n   */\n  static enableLightForeground(tone: number): number {\n    if (DynamicColor.tonePrefersLightForeground(tone) &&\n        !DynamicColor.toneAllowsLightForeground(tone)) {\n      return 49.0;\n    }\n    return tone;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Set of themes supported by Dynamic Color.\n * Instantiate the corresponding subclass, ex. SchemeTonalSpot, to create\n * colors corresponding to the theme.\n */\nexport enum Variant {\n  MONOCHROME,\n  NEUTRAL,\n  TONAL_SPOT,\n  VIBRANT,\n  EXPRESSIVE,\n  FIDELITY,\n  CONTENT,\n  RAINBOW,\n  FRUIT_SALAD\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as math from '../utils/math_utils.js';\n\n/**\n * A class containing the contrast curve for a dynamic color on its background.\n *\n * The four values correspond to contrast requirements for contrast levels\n * -1.0, 0.0, 0.5, and 1.0, respectively.\n */\nexport class ContrastCurve {\n  /**\n   * Creates a `ContrastCurve` object.\n   *\n   * @param low Contrast requirement for contrast level -1.0\n   * @param normal Contrast requirement for contrast level 0.0\n   * @param medium Contrast requirement for contrast level 0.5\n   * @param high Contrast requirement for contrast level 1.0\n   */\n  constructor(\n      readonly low: number,\n      readonly normal: number,\n      readonly medium: number,\n      readonly high: number,\n  ) {}\n\n  /**\n   * Returns the contrast ratio at a given contrast level.\n   *\n   * @param contrastLevel The contrast level. 0.0 is the default (normal);\n   * -1.0 is the lowest; 1.0 is the highest.\n   * @return The contrast ratio, a number between 1.0 and 21.0.\n   */\n  getContrast(contrastLevel: number): number {\n    if (contrastLevel <= -1.0) {\n      return this.low;\n    } else if (contrastLevel < 0.0) {\n      return math.lerp(this.low, this.normal, (contrastLevel - (-1)) / 1);\n    } else if (contrastLevel < 0.5) {\n      return math.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);\n    } else if (contrastLevel < 1.0) {\n      return math.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);\n    } else {\n      return this.high;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DynamicColor} from './dynamic_color.js';\n\n/**\n * Describes the different in tone between colors.\n */\nexport type TonePolarity = 'darker'|'lighter'|'nearer'|'farther';\n\n/**\n * Documents a constraint between two DynamicColors, in which their tones must\n * have a certain distance from each other.\n *\n * Prefer a DynamicColor with a background, this is for special cases when\n * designers want tonal distance, literally contrast, between two colors that\n * don't have a background / foreground relationship or a contrast guarantee.\n */\nexport class ToneDeltaPair {\n  /**\n   * Documents a constraint in tone distance between two DynamicColors.\n   *\n   * The polarity is an adjective that describes \"A\", compared to \"B\".\n   *\n   * For instance, ToneDeltaPair(A, B, 15, 'darker', stayTogether) states that\n   * A's tone should be at least 15 darker than B's.\n   *\n   * 'nearer' and 'farther' describes closeness to the surface roles. For\n   * instance, ToneDeltaPair(A, B, 10, 'nearer', stayTogether) states that A\n   * should be 10 lighter than B in light mode, and 10 darker than B in dark\n   * mode.\n   *\n   * @param roleA The first role in a pair.\n   * @param roleB The second role in a pair.\n   * @param delta Required difference between tones. Absolute value, negative\n   * values have undefined behavior.\n   * @param polarity The relative relation between tones of roleA and roleB,\n   * as described above.\n   * @param stayTogether Whether these two roles should stay on the same side of\n   * the \"awkward zone\" (T50-59). This is necessary for certain cases where\n   * one role has two backgrounds.\n   */\n  constructor(\n      readonly roleA: DynamicColor,\n      readonly roleB: DynamicColor,\n      readonly delta: number,\n      readonly polarity: TonePolarity,\n      readonly stayTogether: boolean,\n  ) {}\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DislikeAnalyzer} from '../dislike/dislike_analyzer.js';\nimport {Hct} from '../hct/hct.js';\nimport {ViewingConditions} from '../hct/viewing_conditions.js';\nimport {DynamicScheme} from '../scheme/dynamic_scheme.js';\nimport {Variant} from '../scheme/variant.js';\n\nimport {ContrastCurve} from './contrast_curve.js';\nimport {DynamicColor} from './dynamic_color.js';\nimport {ToneDeltaPair} from './tone_delta_pair.js';\n\nfunction isFidelity(scheme: DynamicScheme): boolean {\n  return scheme.variant === Variant.FIDELITY ||\n      scheme.variant === Variant.CONTENT;\n}\n\nfunction isMonochrome(scheme: DynamicScheme): boolean {\n  return scheme.variant === Variant.MONOCHROME;\n}\n\nfunction findDesiredChromaByTone(\n    hue: number, chroma: number, tone: number,\n    byDecreasingTone: boolean): number {\n  let answer = tone;\n\n  let closestToChroma = Hct.from(hue, chroma, tone);\n  if (closestToChroma.chroma < chroma) {\n    let chromaPeak = closestToChroma.chroma;\n    while (closestToChroma.chroma < chroma) {\n      answer += byDecreasingTone ? -1.0 : 1.0;\n      const potentialSolution = Hct.from(hue, chroma, answer);\n      if (chromaPeak > potentialSolution.chroma) {\n        break;\n      }\n      if (Math.abs(potentialSolution.chroma - chroma) < 0.4) {\n        break;\n      }\n\n      const potentialDelta = Math.abs(potentialSolution.chroma - chroma);\n      const currentDelta = Math.abs(closestToChroma.chroma - chroma);\n      if (potentialDelta < currentDelta) {\n        closestToChroma = potentialSolution;\n      }\n      chromaPeak = Math.max(chromaPeak, potentialSolution.chroma);\n    }\n  }\n\n  return answer;\n}\n\nfunction viewingConditionsForAlbers(scheme: DynamicScheme): ViewingConditions {\n  return ViewingConditions.make(\n      /*whitePoint=*/ undefined,\n      /*adaptingLuminance=*/ undefined,\n      /*backgroundLstar=*/ scheme.isDark ? 30 : 80,\n      /*surround=*/ undefined,\n      /*discountingIlluminant=*/ undefined,\n  );\n}\n\nfunction performAlbers(prealbers: Hct, scheme: DynamicScheme): number {\n  const albersd =\n      prealbers.inViewingConditions(viewingConditionsForAlbers(scheme));\n  if (DynamicColor.tonePrefersLightForeground(prealbers.tone) &&\n      !DynamicColor.toneAllowsLightForeground(albersd.tone)) {\n    return DynamicColor.enableLightForeground(prealbers.tone);\n  } else {\n    return DynamicColor.enableLightForeground(albersd.tone);\n  }\n}\n\n/**\n * DynamicColors for the colors in the Material Design system.\n */\n// Material Color Utilities namespaces the various utilities it provides.\n// tslint:disable-next-line:class-as-namespace\nexport class MaterialDynamicColors {\n  static contentAccentToneDelta = 15.0;\n  static highestSurface(s: DynamicScheme): DynamicColor {\n    return s.isDark ? MaterialDynamicColors.surfaceBright :\n                      MaterialDynamicColors.surfaceDim;\n  }\n\n  static primaryPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'primary_palette_key_color',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => s.primaryPalette.keyColor.tone,\n  });\n\n  static secondaryPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'secondary_palette_key_color',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => s.secondaryPalette.keyColor.tone,\n  });\n\n  static tertiaryPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'tertiary_palette_key_color',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => s.tertiaryPalette.keyColor.tone,\n  });\n\n  static neutralPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'neutral_palette_key_color',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.neutralPalette.keyColor.tone,\n  });\n\n  static neutralVariantPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'neutral_variant_palette_key_color',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.neutralVariantPalette.keyColor.tone,\n  });\n\n  static background = DynamicColor.fromPalette({\n    name: 'background',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 6 : 98,\n    isBackground: true,\n  });\n\n  static onBackground = DynamicColor.fromPalette({\n    name: 'on_background',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 90 : 10,\n    background: (s) => MaterialDynamicColors.background,\n    contrastCurve: new ContrastCurve(3, 3, 4.5, 7),\n  });\n\n  static surface = DynamicColor.fromPalette({\n    name: 'surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 6 : 98,\n    isBackground: true,\n  });\n\n  static surfaceDim = DynamicColor.fromPalette({\n    name: 'surface_dim',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 6 : 87,\n    isBackground: true,\n  });\n\n  static surfaceBright = DynamicColor.fromPalette({\n    name: 'surface_bright',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 24 : 98,\n    isBackground: true,\n  });\n\n  static surfaceContainerLowest = DynamicColor.fromPalette({\n    name: 'surface_container_lowest',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 4 : 100,\n    isBackground: true,\n  });\n\n  static surfaceContainerLow = DynamicColor.fromPalette({\n    name: 'surface_container_low',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 10 : 96,\n    isBackground: true,\n  });\n\n  static surfaceContainer = DynamicColor.fromPalette({\n    name: 'surface_container',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 12 : 94,\n    isBackground: true,\n  });\n\n  static surfaceContainerHigh = DynamicColor.fromPalette({\n    name: 'surface_container_high',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 17 : 92,\n    isBackground: true,\n  });\n\n  static surfaceContainerHighest = DynamicColor.fromPalette({\n    name: 'surface_container_highest',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 22 : 90,\n    isBackground: true,\n  });\n\n  static onSurface = DynamicColor.fromPalette({\n    name: 'on_surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 90 : 10,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static surfaceVariant = DynamicColor.fromPalette({\n    name: 'surface_variant',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 30 : 90,\n    isBackground: true,\n  });\n\n  static onSurfaceVariant = DynamicColor.fromPalette({\n    name: 'on_surface_variant',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 80 : 30,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static inverseSurface = DynamicColor.fromPalette({\n    name: 'inverse_surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 90 : 20,\n  });\n\n  static inverseOnSurface = DynamicColor.fromPalette({\n    name: 'inverse_on_surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 20 : 95,\n    background: (s) => MaterialDynamicColors.inverseSurface,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static outline = DynamicColor.fromPalette({\n    name: 'outline',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 60 : 50,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1.5, 3, 4.5, 7),\n  });\n\n  static outlineVariant = DynamicColor.fromPalette({\n    name: 'outline_variant',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 30 : 80,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n  });\n\n  static shadow = DynamicColor.fromPalette({\n    name: 'shadow',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => 0,\n  });\n\n  static scrim = DynamicColor.fromPalette({\n    name: 'scrim',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => 0,\n  });\n\n  static surfaceTint = DynamicColor.fromPalette({\n    name: 'surface_tint',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => s.isDark ? 80 : 40,\n    isBackground: true,\n  });\n\n  static primary = DynamicColor.fromPalette({\n    name: 'primary',\n    palette: (s) => s.primaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 100 : 0;\n          }\n          return s.isDark ? 80 : 40;\n        },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.primaryContainer, MaterialDynamicColors.primary,\n        15, 'nearer', false),\n  });\n\n  static onPrimary = DynamicColor.fromPalette({\n    name: 'on_primary',\n    palette: (s) => s.primaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 10 : 90;\n          }\n          return s.isDark ? 20 : 100;\n        },\n    background: (s) => MaterialDynamicColors.primary,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static primaryContainer = DynamicColor.fromPalette({\n    name: 'primary_container',\n    palette: (s) => s.primaryPalette,\n    tone:\n        (s) => {\n          if (isFidelity(s)) {\n            return performAlbers(s.sourceColorHct, s);\n          }\n          if (isMonochrome(s)) {\n            return s.isDark ? 85 : 25;\n          }\n          return s.isDark ? 30 : 90;\n        },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.primaryContainer, MaterialDynamicColors.primary,\n        15, 'nearer', false),\n  });\n\n  static onPrimaryContainer = DynamicColor.fromPalette({\n    name: 'on_primary_container',\n    palette: (s) => s.primaryPalette,\n    tone:\n        (s) => {\n          if (isFidelity(s)) {\n            return DynamicColor.foregroundTone(\n                MaterialDynamicColors.primaryContainer.tone(s), 4.5);\n          }\n          if (isMonochrome(s)) {\n            return s.isDark ? 0 : 100;\n          }\n          return s.isDark ? 90 : 10;\n        },\n    background: (s) => MaterialDynamicColors.primaryContainer,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static inversePrimary = DynamicColor.fromPalette({\n    name: 'inverse_primary',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => s.isDark ? 40 : 80,\n    background: (s) => MaterialDynamicColors.inverseSurface,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static secondary = DynamicColor.fromPalette({\n    name: 'secondary',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => s.isDark ? 80 : 40,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.secondaryContainer,\n        MaterialDynamicColors.secondary, 15, 'nearer', false),\n  });\n\n  static onSecondary = DynamicColor.fromPalette({\n    name: 'on_secondary',\n    palette: (s) => s.secondaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 10 : 100;\n          } else {\n            return s.isDark ? 20 : 100;\n          }\n        },\n    background: (s) => MaterialDynamicColors.secondary,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static secondaryContainer = DynamicColor.fromPalette({\n    name: 'secondary_container',\n    palette: (s) => s.secondaryPalette,\n    tone:\n        (s) => {\n          const initialTone = s.isDark ? 30 : 90;\n          if (isMonochrome(s)) {\n            return s.isDark ? 30 : 85;\n          }\n          if (!isFidelity(s)) {\n            return initialTone;\n          }\n          let answer = findDesiredChromaByTone(\n              s.secondaryPalette.hue, s.secondaryPalette.chroma, initialTone,\n              s.isDark ? false : true);\n          answer = performAlbers(s.secondaryPalette.getHct(answer), s);\n          return answer;\n        },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.secondaryContainer,\n        MaterialDynamicColors.secondary, 15, 'nearer', false),\n  });\n\n  static onSecondaryContainer = DynamicColor.fromPalette({\n    name: 'on_secondary_container',\n    palette: (s) => s.secondaryPalette,\n    tone:\n        (s) => {\n          if (!isFidelity(s)) {\n            return s.isDark ? 90 : 10;\n          }\n          return DynamicColor.foregroundTone(\n              MaterialDynamicColors.secondaryContainer.tone(s), 4.5);\n        },\n    background: (s) => MaterialDynamicColors.secondaryContainer,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static tertiary = DynamicColor.fromPalette({\n    name: 'tertiary',\n    palette: (s) => s.tertiaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 90 : 25;\n          }\n          return s.isDark ? 80 : 40;\n        },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.tertiaryContainer, MaterialDynamicColors.tertiary,\n        15, 'nearer', false),\n  });\n\n  static onTertiary = DynamicColor.fromPalette({\n    name: 'on_tertiary',\n    palette: (s) => s.tertiaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 10 : 90;\n          }\n          return s.isDark ? 20 : 100;\n        },\n    background: (s) => MaterialDynamicColors.tertiary,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static tertiaryContainer = DynamicColor.fromPalette({\n    name: 'tertiary_container',\n    palette: (s) => s.tertiaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 60 : 49;\n          }\n          if (!isFidelity(s)) {\n            return s.isDark ? 30 : 90;\n          }\n          const albersTone =\n              performAlbers(s.tertiaryPalette.getHct(s.sourceColorHct.tone), s);\n          const proposedHct = s.tertiaryPalette.getHct(albersTone);\n          return DislikeAnalyzer.fixIfDisliked(proposedHct).tone;\n        },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.tertiaryContainer, MaterialDynamicColors.tertiary,\n        15, 'nearer', false),\n  });\n\n  static onTertiaryContainer = DynamicColor.fromPalette({\n    name: 'on_tertiary_container',\n    palette: (s) => s.tertiaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 0 : 100;\n          }\n          if (!isFidelity(s)) {\n            return s.isDark ? 90 : 10;\n          }\n          return DynamicColor.foregroundTone(\n              MaterialDynamicColors.tertiaryContainer.tone(s), 4.5);\n        },\n    background: (s) => MaterialDynamicColors.tertiaryContainer,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static error = DynamicColor.fromPalette({\n    name: 'error',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 80 : 40,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.errorContainer, MaterialDynamicColors.error, 15,\n        'nearer', false),\n  });\n\n  static onError = DynamicColor.fromPalette({\n    name: 'on_error',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 20 : 100,\n    background: (s) => MaterialDynamicColors.error,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static errorContainer = DynamicColor.fromPalette({\n    name: 'error_container',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 30 : 90,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.errorContainer, MaterialDynamicColors.error, 15,\n        'nearer', false),\n  });\n\n  static onErrorContainer = DynamicColor.fromPalette({\n    name: 'on_error_container',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 90 : 10,\n    background: (s) => MaterialDynamicColors.errorContainer,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static primaryFixed = DynamicColor.fromPalette({\n    name: 'primary_fixed',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 40.0 : 90.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.primaryFixed,\n        MaterialDynamicColors.primaryFixedDim, 10, 'lighter', true),\n  });\n\n  static primaryFixedDim = DynamicColor.fromPalette({\n    name: 'primary_fixed_dim',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 30.0 : 80.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.primaryFixed,\n        MaterialDynamicColors.primaryFixedDim, 10, 'lighter', true),\n  });\n\n  static onPrimaryFixed = DynamicColor.fromPalette({\n    name: 'on_primary_fixed',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 100.0 : 10.0,\n    background: (s) => MaterialDynamicColors.primaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.primaryFixed,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static onPrimaryFixedVariant = DynamicColor.fromPalette({\n    name: 'on_primary_fixed_variant',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 90.0 : 30.0,\n    background: (s) => MaterialDynamicColors.primaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.primaryFixed,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static secondaryFixed = DynamicColor.fromPalette({\n    name: 'secondary_fixed',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => isMonochrome(s) ? 80.0 : 90.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.secondaryFixed,\n        MaterialDynamicColors.secondaryFixedDim, 10, 'lighter', true),\n  });\n\n  static secondaryFixedDim = DynamicColor.fromPalette({\n    name: 'secondary_fixed_dim',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => isMonochrome(s) ? 70.0 : 80.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.secondaryFixed,\n        MaterialDynamicColors.secondaryFixedDim, 10, 'lighter', true),\n  });\n\n  static onSecondaryFixed = DynamicColor.fromPalette({\n    name: 'on_secondary_fixed',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => 10.0,\n    background: (s) => MaterialDynamicColors.secondaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.secondaryFixed,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static onSecondaryFixedVariant = DynamicColor.fromPalette({\n    name: 'on_secondary_fixed_variant',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => isMonochrome(s) ? 25.0 : 30.0,\n    background: (s) => MaterialDynamicColors.secondaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.secondaryFixed,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static tertiaryFixed = DynamicColor.fromPalette({\n    name: 'tertiary_fixed',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 40.0 : 90.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.tertiaryFixed,\n        MaterialDynamicColors.tertiaryFixedDim, 10, 'lighter', true),\n  });\n\n  static tertiaryFixedDim = DynamicColor.fromPalette({\n    name: 'tertiary_fixed_dim',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 30.0 : 80.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.tertiaryFixed,\n        MaterialDynamicColors.tertiaryFixedDim, 10, 'lighter', true),\n  });\n\n  static onTertiaryFixed = DynamicColor.fromPalette({\n    name: 'on_tertiary_fixed',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 100.0 : 10.0,\n    background: (s) => MaterialDynamicColors.tertiaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.tertiaryFixed,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static onTertiaryFixedVariant = DynamicColor.fromPalette({\n    name: 'on_tertiary_fixed_variant',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 90.0 : 30.0,\n    background: (s) => MaterialDynamicColors.tertiaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.tertiaryFixed,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct.js';\n\n/**\n *  A convenience class for retrieving colors that are constant in hue and\n *  chroma, but vary in tone.\n */\nexport class TonalPalette {\n  private readonly cache = new Map<number, number>();\n\n  /**\n   * @param argb ARGB representation of a color\n   * @return Tones matching that color's hue and chroma.\n   */\n  static fromInt(argb: number): TonalPalette {\n    const hct = Hct.fromInt(argb);\n    return TonalPalette.fromHct(hct);\n  }\n\n  /**\n   * @param hct Hct\n   * @return Tones matching that color's hue and chroma.\n   */\n  static fromHct(hct: Hct) {\n    return new TonalPalette(hct.hue, hct.chroma, hct);\n  }\n\n  /**\n   * @param hue HCT hue\n   * @param chroma HCT chroma\n   * @return Tones matching hue and chroma.\n   */\n  static fromHueAndChroma(hue: number, chroma: number): TonalPalette {\n    return new TonalPalette(hue, chroma, TonalPalette.createKeyColor(hue, chroma));\n  }\n\n  private constructor(readonly hue: number, readonly chroma: number, readonly keyColor: Hct) {}\n\n  private static createKeyColor(hue: number, chroma: number): Hct {\n    const startTone = 50.0;\n    let smallestDeltaHct = Hct.from(hue, chroma, startTone);\n    let smallestDelta = Math.abs(smallestDeltaHct.chroma - chroma);\n    // Starting from T50, check T+/-delta to see if they match the requested\n    // chroma.\n    //\n    // Starts from T50 because T50 has the most chroma available, on\n    // average. Thus it is most likely to have a direct answer and minimize\n    // iteration.\n    for (let delta = 1.0; delta < 50.0; delta += 1.0) {\n      // Termination condition rounding instead of minimizing delta to avoid\n      // case where requested chroma is 16.51, and the closest chroma is 16.49.\n      // Error is minimized, but when rounded and displayed, requested chroma\n      // is 17, key color's chroma is 16.\n      if (Math.round(chroma) === Math.round(smallestDeltaHct.chroma)) {\n        return smallestDeltaHct;\n      }\n\n      const hctAdd = Hct.from(hue, chroma, startTone + delta);\n      const hctAddDelta = Math.abs(hctAdd.chroma - chroma);\n      if (hctAddDelta < smallestDelta) {\n        smallestDelta = hctAddDelta;\n        smallestDeltaHct = hctAdd;\n      }\n\n      const hctSubtract = Hct.from(hue, chroma, startTone - delta);\n      const hctSubtractDelta = Math.abs(hctSubtract.chroma - chroma);\n      if (hctSubtractDelta < smallestDelta) {\n        smallestDelta = hctSubtractDelta;\n        smallestDeltaHct = hctSubtract;\n      }\n    }\n\n    return smallestDeltaHct;\n  }\n\n  /**\n   * @param tone HCT tone, measured from 0 to 100.\n   * @return ARGB representation of a color with that tone.\n   */\n  tone(tone: number): number {\n    let argb = this.cache.get(tone);\n    if (argb === undefined) {\n      argb = Hct.from(this.hue, this.chroma, tone).toInt();\n      this.cache.set(tone, argb);\n    }\n    return argb;\n  }\n\n  /**\n   * @param tone HCT tone.\n   * @return HCT representation of a color with that tone.\n   */\n  getHct(tone: number): Hct {\n    return Hct.fromInt(this.tone(tone));\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct.js';\n\nimport {TonalPalette} from './tonal_palette.js';\n\n/**\n * Set of colors to generate a [CorePalette] from\n */\nexport interface CorePaletteColors {\n  primary: number;\n  secondary?: number;\n  tertiary?: number;\n  neutral?: number;\n  neutralVariant?: number;\n  error?: number;\n}\n\n/**\n * An intermediate concept between the key color for a UI theme, and a full\n * color scheme. 5 sets of tones are generated, all except one use the same hue\n * as the key color, and all vary in chroma.\n */\nexport class CorePalette {\n  a1: TonalPalette;\n  a2: TonalPalette;\n  a3: TonalPalette;\n  n1: TonalPalette;\n  n2: TonalPalette;\n  error: TonalPalette;\n\n  /**\n   * @param argb ARGB representation of a color\n   */\n  static of(argb: number): CorePalette {\n    return new CorePalette(argb, false);\n  }\n\n  /**\n   * @param argb ARGB representation of a color\n   */\n  static contentOf(argb: number): CorePalette {\n    return new CorePalette(argb, true);\n  }\n\n  /**\n   * Create a [CorePalette] from a set of colors\n   */\n  static fromColors(colors: CorePaletteColors): CorePalette {\n    return CorePalette.createPaletteFromColors(false, colors);\n  }\n\n  /**\n   * Create a content [CorePalette] from a set of colors\n   */\n  static contentFromColors(colors: CorePaletteColors): CorePalette {\n    return CorePalette.createPaletteFromColors(true, colors);\n  }\n\n  private static createPaletteFromColors(\n      content: boolean,\n      colors: CorePaletteColors,\n  ) {\n    const palette = new CorePalette(colors.primary, content);\n    if (colors.secondary) {\n      const p = new CorePalette(colors.secondary, content);\n      palette.a2 = p.a1;\n    }\n    if (colors.tertiary) {\n      const p = new CorePalette(colors.tertiary, content);\n      palette.a3 = p.a1;\n    }\n    if (colors.error) {\n      const p = new CorePalette(colors.error, content);\n      palette.error = p.a1;\n    }\n    if (colors.neutral) {\n      const p = new CorePalette(colors.neutral, content);\n      palette.n1 = p.n1;\n    }\n    if (colors.neutralVariant) {\n      const p = new CorePalette(colors.neutralVariant, content);\n      palette.n2 = p.n2;\n    }\n    return palette;\n  }\n\n  private constructor(argb: number, isContent: boolean) {\n    const hct = Hct.fromInt(argb);\n    const hue = hct.hue;\n    const chroma = hct.chroma;\n    if (isContent) {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, chroma / 2);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 12, 4));\n      this.n2 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 6, 8));\n    } else {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, Math.max(48, chroma));\n      this.a2 = TonalPalette.fromHueAndChroma(hue, 16);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, 24);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, 4);\n      this.n2 = TonalPalette.fromHueAndChroma(hue, 8);\n    }\n    this.error = TonalPalette.fromHueAndChroma(25, 84);\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from '../utils/color_utils.js';\n\nimport {PointProvider} from './point_provider.js';\n\n/**\n * Provides conversions needed for K-Means quantization. Converting input to\n * points, and converting the final state of the K-Means algorithm to colors.\n */\nexport class LabPointProvider implements PointProvider {\n  /**\n   * Convert a color represented in ARGB to a 3-element array of L*a*b*\n   * coordinates of the color.\n   */\n  fromInt(argb: number): number[] {\n    return utils.labFromArgb(argb);\n  }\n\n  /**\n   * Convert a 3-element array to a color represented in ARGB.\n   */\n  toInt(point: number[]): number {\n    return utils.argbFromLab(point[0], point[1], point[2]);\n  }\n\n  /**\n   * Standard CIE 1976 delta E formula also takes the square root, unneeded\n   * here. This method is used by quantization algorithms to compare distance,\n   * and the relative ordering is the same, with or without a square root.\n   *\n   * This relatively minor optimization is helpful because this method is\n   * called at least once for each pixel in an image.\n   */\n  distance(from: number[], to: number[]): number {\n    const dL = from[0] - to[0];\n    const dA = from[1] - to[1];\n    const dB = from[2] - to[2];\n    return dL * dL + dA * dA + dB * dB;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LabPointProvider} from './lab_point_provider.js';\n\nconst MAX_ITERATIONS = 10;\nconst MIN_MOVEMENT_DISTANCE = 3.0;\n\n/**\n * An image quantizer that improves on the speed of a standard K-Means algorithm\n * by implementing several optimizations, including deduping identical pixels\n * and a triangle inequality rule that reduces the number of comparisons needed\n * to identify which cluster a point should be moved to.\n *\n * Wsmeans stands for Weighted Square Means.\n *\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\n * paper, Improving the Performance of K-Means for Color Quantization.\n * https://arxiv.org/abs/1101.0395\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerWsmeans {\n  /**\n   * @param inputPixels Colors in ARGB format.\n   * @param startingClusters Defines the initial state of the quantizer. Passing\n   *     an empty array is fine, the implementation will create its own initial\n   *     state that leads to reproducible results for the same inputs.\n   *     Passing an array that is the result of Wu quantization leads to higher\n   *     quality results.\n   * @param maxColors The number of colors to divide the image into. A lower\n   *     number of colors may be returned.\n   * @return Colors in ARGB format.\n   */\n  static quantize(\n      inputPixels: number[], startingClusters: number[],\n      maxColors: number): Map<number, number> {\n    const pixelToCount = new Map<number, number>();\n    const points = new Array<number[]>();\n    const pixels = new Array<number>();\n    const pointProvider = new LabPointProvider();\n    let pointCount = 0;\n    for (let i = 0; i < inputPixels.length; i++) {\n      const inputPixel = inputPixels[i];\n      const pixelCount = pixelToCount.get(inputPixel);\n      if (pixelCount === undefined) {\n        pointCount++;\n        points.push(pointProvider.fromInt(inputPixel));\n        pixels.push(inputPixel);\n        pixelToCount.set(inputPixel, 1);\n      } else {\n        pixelToCount.set(inputPixel, pixelCount + 1);\n      }\n    }\n\n    const counts = new Array<number>();\n    for (let i = 0; i < pointCount; i++) {\n      const pixel = pixels[i];\n      const count = pixelToCount.get(pixel);\n      if (count !== undefined) {\n        counts[i] = count;\n      }\n    }\n\n    let clusterCount = Math.min(maxColors, pointCount);\n    if (startingClusters.length > 0) {\n      clusterCount = Math.min(clusterCount, startingClusters.length);\n    }\n\n    const clusters = new Array<number[]>();\n    for (let i = 0; i < startingClusters.length; i++) {\n      clusters.push(pointProvider.fromInt(startingClusters[i]));\n    }\n    const additionalClustersNeeded = clusterCount - clusters.length;\n    if (startingClusters.length === 0 && additionalClustersNeeded > 0) {\n      for (let i = 0; i < additionalClustersNeeded; i++) {\n        const l = Math.random() * 100.0;\n        const a = Math.random() * (100.0 - (-100.0) + 1) + -100;\n        const b = Math.random() * (100.0 - (-100.0) + 1) + -100;\n\n        clusters.push(new Array(l, a, b));\n      }\n    }\n\n    const clusterIndices = new Array<number>();\n    for (let i = 0; i < pointCount; i++) {\n      clusterIndices.push(Math.floor(Math.random() * clusterCount));\n    }\n\n    const indexMatrix = new Array<number[]>();\n    for (let i = 0; i < clusterCount; i++) {\n      indexMatrix.push(new Array<number>());\n      for (let j = 0; j < clusterCount; j++) {\n        indexMatrix[i].push(0);\n      }\n    }\n\n    const distanceToIndexMatrix = new Array<DistanceAndIndex[]>();\n    for (let i = 0; i < clusterCount; i++) {\n      distanceToIndexMatrix.push(new Array<DistanceAndIndex>());\n      for (let j = 0; j < clusterCount; j++) {\n        distanceToIndexMatrix[i].push(new DistanceAndIndex());\n      }\n    }\n\n\n    const pixelCountSums = new Array<number>();\n    for (let i = 0; i < clusterCount; i++) {\n      pixelCountSums.push(0);\n    }\n    for (let iteration = 0; iteration < MAX_ITERATIONS; iteration++) {\n      for (let i = 0; i < clusterCount; i++) {\n        for (let j = i + 1; j < clusterCount; j++) {\n          const distance = pointProvider.distance(clusters[i], clusters[j]);\n          distanceToIndexMatrix[j][i].distance = distance;\n          distanceToIndexMatrix[j][i].index = i;\n          distanceToIndexMatrix[i][j].distance = distance;\n          distanceToIndexMatrix[i][j].index = j;\n        }\n        distanceToIndexMatrix[i].sort();\n        for (let j = 0; j < clusterCount; j++) {\n          indexMatrix[i][j] = distanceToIndexMatrix[i][j].index;\n        }\n      }\n\n      let pointsMoved = 0;\n      for (let i = 0; i < pointCount; i++) {\n        const point = points[i];\n        const previousClusterIndex = clusterIndices[i];\n        const previousCluster = clusters[previousClusterIndex];\n        const previousDistance = pointProvider.distance(point, previousCluster);\n        let minimumDistance = previousDistance;\n        let newClusterIndex = -1;\n        for (let j = 0; j < clusterCount; j++) {\n          if (distanceToIndexMatrix[previousClusterIndex][j].distance >=\n              4 * previousDistance) {\n            continue;\n          }\n          const distance = pointProvider.distance(point, clusters[j]);\n          if (distance < minimumDistance) {\n            minimumDistance = distance;\n            newClusterIndex = j;\n          }\n        }\n        if (newClusterIndex !== -1) {\n          const distanceChange = Math.abs(\n              (Math.sqrt(minimumDistance) - Math.sqrt(previousDistance)));\n          if (distanceChange > MIN_MOVEMENT_DISTANCE) {\n            pointsMoved++;\n            clusterIndices[i] = newClusterIndex;\n          }\n        }\n      }\n\n      if (pointsMoved === 0 && iteration !== 0) {\n        break;\n      }\n\n      const componentASums = new Array<number>(clusterCount).fill(0);\n      const componentBSums = new Array<number>(clusterCount).fill(0);\n      const componentCSums = new Array<number>(clusterCount).fill(0);\n\n      for (let i = 0; i < clusterCount; i++) {\n        pixelCountSums[i] = 0;\n      }\n      for (let i = 0; i < pointCount; i++) {\n        const clusterIndex = clusterIndices[i];\n        const point = points[i];\n        const count = counts[i];\n        pixelCountSums[clusterIndex] += count;\n        componentASums[clusterIndex] += (point[0] * count);\n        componentBSums[clusterIndex] += (point[1] * count);\n        componentCSums[clusterIndex] += (point[2] * count);\n      }\n\n      for (let i = 0; i < clusterCount; i++) {\n        const count = pixelCountSums[i];\n        if (count === 0) {\n          clusters[i] = [0.0, 0.0, 0.0];\n          continue;\n        }\n        const a = componentASums[i] / count;\n        const b = componentBSums[i] / count;\n        const c = componentCSums[i] / count;\n        clusters[i] = [a, b, c];\n      }\n    }\n\n    const argbToPopulation = new Map<number, number>();\n    for (let i = 0; i < clusterCount; i++) {\n      const count = pixelCountSums[i];\n      if (count === 0) {\n        continue;\n      }\n\n      const possibleNewCluster = pointProvider.toInt(clusters[i]);\n      if (argbToPopulation.has(possibleNewCluster)) {\n        continue;\n      }\n\n      argbToPopulation.set(possibleNewCluster, count);\n    }\n    return argbToPopulation;\n  }\n}\n\n/**\n *  A wrapper for maintaining a table of distances between K-Means clusters.\n */\nclass DistanceAndIndex {\n  distance: number = -1;\n  index: number = -1;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from '../utils/color_utils.js';\n\n/**\n * Quantizes an image into a map, with keys of ARGB colors, and values of the\n * number of times that color appears in the image.\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerMap {\n  /**\n   * @param pixels Colors in ARGB format.\n   * @return A Map with keys of ARGB colors, and values of the number of times\n   *     the color appears in the image.\n   */\n  static quantize(pixels: number[]): Map<number, number> {\n    const countByColor = new Map<number, number>();\n    for (let i = 0; i < pixels.length; i++) {\n      const pixel = pixels[i];\n      const alpha = utils.alphaFromArgb(pixel);\n      if (alpha < 255) {\n        continue;\n      }\n      countByColor.set(pixel, (countByColor.get(pixel) ?? 0) + 1);\n    }\n    return countByColor;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from '../utils/color_utils.js';\n\nimport {QuantizerMap} from './quantizer_map.js';\n\nconst INDEX_BITS = 5;\nconst SIDE_LENGTH = 33;    // ((1 << INDEX_INDEX_BITS) + 1)\nconst TOTAL_SIZE = 35937;  // SIDE_LENGTH * SIDE_LENGTH * SIDE_LENGTH\n\nconst directions = {\n  RED: 'red',\n  GREEN: 'green',\n  BLUE: 'blue',\n};\n\n/**\n * An image quantizer that divides the image's pixels into clusters by\n * recursively cutting an RGB cube, based on the weight of pixels in each area\n * of the cube.\n *\n * The algorithm was described by Xiaolin Wu in Graphic Gems II, published in\n * 1991.\n */\nexport class QuantizerWu {\n  constructor(\n      private weights: number[] = [], private momentsR: number[] = [],\n      private momentsG: number[] = [], private momentsB: number[] = [],\n      private moments: number[] = [], private cubes: Box[] = []) {}\n\n  /**\n   * @param pixels Colors in ARGB format.\n   * @param maxColors The number of colors to divide the image into. A lower\n   *     number of colors may be returned.\n   * @return Colors in ARGB format.\n   */\n  quantize(pixels: number[], maxColors: number): number[] {\n    this.constructHistogram(pixels);\n    this.computeMoments();\n    const createBoxesResult = this.createBoxes(maxColors);\n    const results = this.createResult(createBoxesResult.resultCount);\n    return results;\n  }\n\n  private constructHistogram(pixels: number[]) {\n    this.weights = Array.from<number>({length: TOTAL_SIZE}).fill(0);\n    this.momentsR = Array.from<number>({length: TOTAL_SIZE}).fill(0);\n    this.momentsG = Array.from<number>({length: TOTAL_SIZE}).fill(0);\n    this.momentsB = Array.from<number>({length: TOTAL_SIZE}).fill(0);\n    this.moments = Array.from<number>({length: TOTAL_SIZE}).fill(0);\n\n    const countByColor = QuantizerMap.quantize(pixels);\n\n    for (const [pixel, count] of countByColor.entries()) {\n      const red = utils.redFromArgb(pixel);\n      const green = utils.greenFromArgb(pixel);\n      const blue = utils.blueFromArgb(pixel);\n\n      const bitsToRemove = 8 - INDEX_BITS;\n      const iR = (red >> bitsToRemove) + 1;\n      const iG = (green >> bitsToRemove) + 1;\n      const iB = (blue >> bitsToRemove) + 1;\n      const index = this.getIndex(iR, iG, iB);\n\n      this.weights[index] = (this.weights[index] ?? 0) + count;\n      this.momentsR[index] += count * red;\n      this.momentsG[index] += count * green;\n      this.momentsB[index] += count * blue;\n      this.moments[index] += count * (red * red + green * green + blue * blue);\n    }\n  }\n\n  private computeMoments() {\n    for (let r = 1; r < SIDE_LENGTH; r++) {\n      const area = Array.from<number>({length: SIDE_LENGTH}).fill(0);\n      const areaR = Array.from<number>({length: SIDE_LENGTH}).fill(0);\n      const areaG = Array.from<number>({length: SIDE_LENGTH}).fill(0);\n      const areaB = Array.from<number>({length: SIDE_LENGTH}).fill(0);\n      const area2 = Array.from<number>({length: SIDE_LENGTH}).fill(0.0);\n      for (let g = 1; g < SIDE_LENGTH; g++) {\n        let line = 0;\n        let lineR = 0;\n        let lineG = 0;\n        let lineB = 0;\n        let line2 = 0.0;\n        for (let b = 1; b < SIDE_LENGTH; b++) {\n          const index = this.getIndex(r, g, b);\n          line += this.weights[index];\n          lineR += this.momentsR[index];\n          lineG += this.momentsG[index];\n          lineB += this.momentsB[index];\n          line2 += this.moments[index];\n\n          area[b] += line;\n          areaR[b] += lineR;\n          areaG[b] += lineG;\n          areaB[b] += lineB;\n          area2[b] += line2;\n\n          const previousIndex = this.getIndex(r - 1, g, b);\n          this.weights[index] = this.weights[previousIndex] + area[b];\n          this.momentsR[index] = this.momentsR[previousIndex] + areaR[b];\n          this.momentsG[index] = this.momentsG[previousIndex] + areaG[b];\n          this.momentsB[index] = this.momentsB[previousIndex] + areaB[b];\n          this.moments[index] = this.moments[previousIndex] + area2[b];\n        }\n      }\n    }\n  }\n\n  private createBoxes(maxColors: number): CreateBoxesResult {\n    this.cubes =\n        Array.from<number>({length: maxColors}).fill(0).map(() => new Box());\n    const volumeVariance = Array.from<number>({length: maxColors}).fill(0.0);\n    this.cubes[0].r0 = 0;\n    this.cubes[0].g0 = 0;\n    this.cubes[0].b0 = 0;\n\n    this.cubes[0].r1 = SIDE_LENGTH - 1;\n    this.cubes[0].g1 = SIDE_LENGTH - 1;\n    this.cubes[0].b1 = SIDE_LENGTH - 1;\n\n    let generatedColorCount = maxColors;\n    let next = 0;\n    for (let i = 1; i < maxColors; i++) {\n      if (this.cut(this.cubes[next], this.cubes[i])) {\n        volumeVariance[next] =\n            this.cubes[next].vol > 1 ? this.variance(this.cubes[next]) : 0.0;\n        volumeVariance[i] =\n            this.cubes[i].vol > 1 ? this.variance(this.cubes[i]) : 0.0;\n      } else {\n        volumeVariance[next] = 0.0;\n        i--;\n      }\n\n      next = 0;\n      let temp = volumeVariance[0];\n      for (let j = 1; j <= i; j++) {\n        if (volumeVariance[j] > temp) {\n          temp = volumeVariance[j];\n          next = j;\n        }\n      }\n      if (temp <= 0.0) {\n        generatedColorCount = i + 1;\n        break;\n      }\n    }\n    return new CreateBoxesResult(maxColors, generatedColorCount);\n  }\n\n  private createResult(colorCount: number): number[] {\n    const colors: number[] = [];\n    for (let i = 0; i < colorCount; ++i) {\n      const cube = this.cubes[i];\n      const weight = this.volume(cube, this.weights);\n      if (weight > 0) {\n        const r = Math.round(this.volume(cube, this.momentsR) / weight);\n        const g = Math.round(this.volume(cube, this.momentsG) / weight);\n        const b = Math.round(this.volume(cube, this.momentsB) / weight);\n        const color = (255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) |\n            (b & 0x0ff);\n        colors.push(color);\n      }\n    }\n    return colors;\n  }\n\n  private variance(cube: Box) {\n    const dr = this.volume(cube, this.momentsR);\n    const dg = this.volume(cube, this.momentsG);\n    const db = this.volume(cube, this.momentsB);\n    const xx = this.moments[this.getIndex(cube.r1, cube.g1, cube.b1)] -\n        this.moments[this.getIndex(cube.r1, cube.g1, cube.b0)] -\n        this.moments[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n        this.moments[this.getIndex(cube.r1, cube.g0, cube.b0)] -\n        this.moments[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n        this.moments[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n        this.moments[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n        this.moments[this.getIndex(cube.r0, cube.g0, cube.b0)];\n    const hypotenuse = dr * dr + dg * dg + db * db;\n    const volume = this.volume(cube, this.weights);\n    return xx - hypotenuse / volume;\n  }\n\n  private cut(one: Box, two: Box) {\n    const wholeR = this.volume(one, this.momentsR);\n    const wholeG = this.volume(one, this.momentsG);\n    const wholeB = this.volume(one, this.momentsB);\n    const wholeW = this.volume(one, this.weights);\n\n    const maxRResult = this.maximize(\n        one, directions.RED, one.r0 + 1, one.r1, wholeR, wholeG, wholeB,\n        wholeW);\n    const maxGResult = this.maximize(\n        one, directions.GREEN, one.g0 + 1, one.g1, wholeR, wholeG, wholeB,\n        wholeW);\n    const maxBResult = this.maximize(\n        one, directions.BLUE, one.b0 + 1, one.b1, wholeR, wholeG, wholeB,\n        wholeW);\n\n    let direction;\n    const maxR = maxRResult.maximum;\n    const maxG = maxGResult.maximum;\n    const maxB = maxBResult.maximum;\n    if (maxR >= maxG && maxR >= maxB) {\n      if (maxRResult.cutLocation < 0) {\n        return false;\n      }\n      direction = directions.RED;\n    } else if (maxG >= maxR && maxG >= maxB) {\n      direction = directions.GREEN;\n    } else {\n      direction = directions.BLUE;\n    }\n\n    two.r1 = one.r1;\n    two.g1 = one.g1;\n    two.b1 = one.b1;\n\n    switch (direction) {\n      case directions.RED:\n        one.r1 = maxRResult.cutLocation;\n        two.r0 = one.r1;\n        two.g0 = one.g0;\n        two.b0 = one.b0;\n        break;\n      case directions.GREEN:\n        one.g1 = maxGResult.cutLocation;\n        two.r0 = one.r0;\n        two.g0 = one.g1;\n        two.b0 = one.b0;\n        break;\n      case directions.BLUE:\n        one.b1 = maxBResult.cutLocation;\n        two.r0 = one.r0;\n        two.g0 = one.g0;\n        two.b0 = one.b1;\n        break;\n      default:\n        throw new Error('unexpected direction ' + direction);\n    }\n\n    one.vol = (one.r1 - one.r0) * (one.g1 - one.g0) * (one.b1 - one.b0);\n    two.vol = (two.r1 - two.r0) * (two.g1 - two.g0) * (two.b1 - two.b0);\n    return true;\n  }\n\n  private maximize(\n      cube: Box, direction: string, first: number, last: number, wholeR: number,\n      wholeG: number, wholeB: number, wholeW: number) {\n    const bottomR = this.bottom(cube, direction, this.momentsR);\n    const bottomG = this.bottom(cube, direction, this.momentsG);\n    const bottomB = this.bottom(cube, direction, this.momentsB);\n    const bottomW = this.bottom(cube, direction, this.weights);\n\n    let max = 0.0;\n    let cut = -1;\n\n    let halfR = 0;\n    let halfG = 0;\n    let halfB = 0;\n    let halfW = 0;\n    for (let i = first; i < last; i++) {\n      halfR = bottomR + this.top(cube, direction, i, this.momentsR);\n      halfG = bottomG + this.top(cube, direction, i, this.momentsG);\n      halfB = bottomB + this.top(cube, direction, i, this.momentsB);\n      halfW = bottomW + this.top(cube, direction, i, this.weights);\n      if (halfW === 0) {\n        continue;\n      }\n\n      let tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\n      let tempDenominator = halfW * 1.0;\n      let temp = tempNumerator / tempDenominator;\n\n      halfR = wholeR - halfR;\n      halfG = wholeG - halfG;\n      halfB = wholeB - halfB;\n      halfW = wholeW - halfW;\n      if (halfW === 0) {\n        continue;\n      }\n\n      tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\n      tempDenominator = halfW * 1.0;\n      temp += tempNumerator / tempDenominator;\n\n      if (temp > max) {\n        max = temp;\n        cut = i;\n      }\n    }\n    return new MaximizeResult(cut, max);\n  }\n\n  private volume(cube: Box, moment: number[]) {\n    return (\n        moment[this.getIndex(cube.r1, cube.g1, cube.b1)] -\n        moment[this.getIndex(cube.r1, cube.g1, cube.b0)] -\n        moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n        moment[this.getIndex(cube.r1, cube.g0, cube.b0)] -\n        moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n        moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n        moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n        moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n  }\n\n  private bottom(cube: Box, direction: string, moment: number[]) {\n    switch (direction) {\n      case directions.RED:\n        return (\n            -moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n            moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n            moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n            moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n      case directions.GREEN:\n        return (\n            -moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n            moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\n            moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n            moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n      case directions.BLUE:\n        return (\n            -moment[this.getIndex(cube.r1, cube.g1, cube.b0)] +\n            moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\n            moment[this.getIndex(cube.r0, cube.g1, cube.b0)] -\n            moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n      default:\n        throw new Error('unexpected direction $direction');\n    }\n  }\n\n  private top(\n      cube: Box, direction: string, position: number, moment: number[]) {\n    switch (direction) {\n      case directions.RED:\n        return (\n            moment[this.getIndex(position, cube.g1, cube.b1)] -\n            moment[this.getIndex(position, cube.g1, cube.b0)] -\n            moment[this.getIndex(position, cube.g0, cube.b1)] +\n            moment[this.getIndex(position, cube.g0, cube.b0)]);\n      case directions.GREEN:\n        return (\n            moment[this.getIndex(cube.r1, position, cube.b1)] -\n            moment[this.getIndex(cube.r1, position, cube.b0)] -\n            moment[this.getIndex(cube.r0, position, cube.b1)] +\n            moment[this.getIndex(cube.r0, position, cube.b0)]);\n      case directions.BLUE:\n        return (\n            moment[this.getIndex(cube.r1, cube.g1, position)] -\n            moment[this.getIndex(cube.r1, cube.g0, position)] -\n            moment[this.getIndex(cube.r0, cube.g1, position)] +\n            moment[this.getIndex(cube.r0, cube.g0, position)]);\n      default:\n        throw new Error('unexpected direction $direction');\n    }\n  }\n\n  private getIndex(r: number, g: number, b: number): number {\n    return (r << (INDEX_BITS * 2)) + (r << (INDEX_BITS + 1)) + r +\n        (g << INDEX_BITS) + g + b;\n  }\n}\n\n/**\n * Keeps track of the state of each box created as the Wu  quantization\n * algorithm progresses through dividing the image's pixels as plotted in RGB.\n */\nclass Box {\n  constructor(\n      public r0: number = 0, public r1: number = 0, public g0: number = 0,\n      public g1: number = 0, public b0: number = 0, public b1: number = 0,\n      public vol: number = 0) {}\n}\n\n/**\n * Represents final result of Wu algorithm.\n */\nclass CreateBoxesResult {\n  /**\n   * @param requestedCount how many colors the caller asked to be returned from\n   *     quantization.\n   * @param resultCount the actual number of colors achieved from quantization.\n   *     May be lower than the requested count.\n   */\n  constructor(public requestedCount: number, public resultCount: number) {}\n}\n\n/**\n * Represents the result of calculating where to cut an existing box in such\n * a way to maximize variance between the two new boxes created by a cut.\n */\nclass MaximizeResult {\n  constructor(public cutLocation: number, public maximum: number) {}\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {QuantizerWsmeans} from './quantizer_wsmeans.js';\nimport {QuantizerWu} from './quantizer_wu.js';\n\n/**\n * An image quantizer that improves on the quality of a standard K-Means\n * algorithm by setting the K-Means initial state to the output of a Wu\n * quantizer, instead of random centroids. Improves on speed by several\n * optimizations, as implemented in Wsmeans, or Weighted Square Means, K-Means\n * with those optimizations.\n *\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\n * paper, Improving the Performance of K-Means for Color Quantization.\n * https://arxiv.org/abs/1101.0395\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerCelebi {\n  /**\n   * @param pixels Colors in ARGB format.\n   * @param maxColors The number of colors to divide the image into. A lower\n   *     number of colors may be returned.\n   * @return Map with keys of colors in ARGB format, and values of number of\n   *     pixels in the original image that correspond to the color in the\n   *     quantized image.\n   */\n  static quantize(pixels: number[], maxColors: number): Map<number, number> {\n    const wu = new QuantizerWu();\n    const wuResult = wu.quantize(pixels, maxColors);\n    return QuantizerWsmeans.quantize(pixels, wuResult, maxColors);\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct.js';\nimport {TonalPalette} from '../palettes/tonal_palette.js';\nimport * as math from '../utils/math_utils.js';\n\nimport {Variant} from './variant.js';\n\n/**\n * @param sourceColorArgb The source color of the theme as an ARGB 32-bit\n *     integer.\n * @param variant The variant, or style, of the theme.\n * @param contrastLevel Value from -1 to 1. -1 represents minimum contrast,\n * 0 represents standard (i.e. the design as spec'd), and 1 represents maximum\n * contrast.\n * @param isDark Whether the scheme is in dark mode or light mode.\n * @param primaryPalette Given a tone, produces a color. Hue and chroma of the\n * color are specified in the design specification of the variant. Usually\n * colorful.\n * @param secondaryPalette Given a tone, produces a color. Hue and chroma of\n * the color are specified in the design specification of the variant. Usually\n * less colorful.\n * @param tertiaryPalette Given a tone, produces a color. Hue and chroma of\n * the color are specified in the design specification of the variant. Usually\n * a different hue from primary and colorful.\n * @param neutralPalette Given a tone, produces a color. Hue and chroma of the\n * color are specified in the design specification of the variant. Usually not\n * colorful at all, intended for background & surface colors.\n * @param neutralVariantPalette Given a tone, produces a color. Hue and chroma\n * of the color are specified in the design specification of the variant.\n * Usually not colorful, but slightly more colorful than Neutral. Intended for\n * backgrounds & surfaces.\n */\ninterface DynamicSchemeOptions {\n  sourceColorArgb: number;\n  variant: Variant;\n  contrastLevel: number;\n  isDark: boolean;\n  primaryPalette: TonalPalette;\n  secondaryPalette: TonalPalette;\n  tertiaryPalette: TonalPalette;\n  neutralPalette: TonalPalette;\n  neutralVariantPalette: TonalPalette;\n}\n\n/**\n * Constructed by a set of values representing the current UI state (such as\n * whether or not its dark theme, what the theme style is, etc.), and\n * provides a set of TonalPalettes that can create colors that fit in\n * with the theme style. Used by DynamicColor to resolve into a color.\n */\nexport class DynamicScheme {\n  /**\n   * The source color of the theme as an HCT color.\n   */\n  sourceColorHct: Hct;\n  /**\n   * Given a tone, produces a reddish, colorful, color.\n   */\n  errorPalette: TonalPalette;\n\n  /** The source color of the theme as an ARGB 32-bit integer. */\n  readonly sourceColorArgb: number;\n\n  /** The variant, or style, of the theme. */\n  readonly variant: Variant;\n\n  /**\n   * Value from -1 to 1. -1 represents minimum contrast. 0 represents standard\n   * (i.e. the design as spec'd), and 1 represents maximum contrast.\n   */\n  readonly contrastLevel: number;\n\n  /** Whether the scheme is in dark mode or light mode. */\n  readonly isDark: boolean;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of the\n   * color are specified in the design specification of the variant. Usually\n   * colorful.\n   */\n  readonly primaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of\n   * the color are specified in the design specification of the variant. Usually\n   * less colorful.\n   */\n  readonly secondaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of\n   * the color are specified in the design specification of the variant. Usually\n   * a different hue from primary and colorful.\n   */\n  readonly tertiaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of the\n   * color are specified in the design specification of the variant. Usually not\n   * colorful at all, intended for background & surface colors.\n   */\n  readonly neutralPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma\n   * of the color are specified in the design specification of the variant.\n   * Usually not colorful, but slightly more colorful than Neutral. Intended for\n   * backgrounds & surfaces.\n   */\n  readonly neutralVariantPalette: TonalPalette;\n\n  constructor(args: DynamicSchemeOptions) {\n    this.sourceColorArgb = args.sourceColorArgb;\n    this.variant = args.variant;\n    this.contrastLevel = args.contrastLevel;\n    this.isDark = args.isDark;\n    this.sourceColorHct = Hct.fromInt(args.sourceColorArgb);\n    this.primaryPalette = args.primaryPalette;\n    this.secondaryPalette = args.secondaryPalette;\n    this.tertiaryPalette = args.tertiaryPalette;\n    this.neutralPalette = args.neutralPalette;\n    this.neutralVariantPalette = args.neutralVariantPalette;\n    this.errorPalette = TonalPalette.fromHueAndChroma(25.0, 84.0);\n  }\n\n  /**\n   * Support design spec'ing Dynamic Color by schemes that specify hue\n   * rotations that should be applied at certain breakpoints.\n   * @param sourceColor the source color of the theme, in HCT.\n   * @param hues The \"breakpoints\", i.e. the hues at which a rotation should\n   * be apply.\n   * @param rotations The rotation that should be applied when source color's\n   * hue is >= the same index in hues array, and <= the hue at the next index\n   * in hues array.\n   */\n  static getRotatedHue(sourceColor: Hct, hues: number[], rotations: number[]):\n      number {\n    const sourceHue = sourceColor.hue;\n    if (hues.length !== rotations.length) {\n      throw new Error(`mismatch between hue length ${hues.length} & rotations ${\n          rotations.length}`);\n    }\n    if (rotations.length === 1) {\n      return math.sanitizeDegreesDouble(sourceColor.hue + rotations[0]);\n    }\n    const size = hues.length;\n    for (let i = 0; i <= size - 2; i++) {\n      const thisHue = hues[i];\n      const nextHue = hues[i + 1];\n      if (thisHue < sourceHue && sourceHue < nextHue) {\n        return math.sanitizeDegreesDouble(sourceHue + rotations[i]);\n      }\n    }\n    // If this statement executes, something is wrong, there should have been a\n    // rotation found using the arrays.\n    return sourceHue;\n  }\n}", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport {CorePalette} from '../palettes/core_palette.js';\n\n/**\n * Represents a Material color scheme, a mapping of color roles to colors.\n */\nexport class Scheme {\n  get primary(): number {\n    return this.props.primary;\n  }\n\n  get onPrimary(): number {\n    return this.props.onPrimary;\n  }\n\n  get primaryContainer(): number {\n    return this.props.primaryContainer;\n  }\n\n  get onPrimaryContainer(): number {\n    return this.props.onPrimaryContainer;\n  }\n\n  get secondary(): number {\n    return this.props.secondary;\n  }\n\n  get onSecondary(): number {\n    return this.props.onSecondary;\n  }\n\n  get secondaryContainer(): number {\n    return this.props.secondaryContainer;\n  }\n\n  get onSecondaryContainer(): number {\n    return this.props.onSecondaryContainer;\n  }\n\n  get tertiary(): number {\n    return this.props.tertiary;\n  }\n\n  get onTertiary(): number {\n    return this.props.onTertiary;\n  }\n\n  get tertiaryContainer(): number {\n    return this.props.tertiaryContainer;\n  }\n\n  get onTertiaryContainer(): number {\n    return this.props.onTertiaryContainer;\n  }\n\n  get error(): number {\n    return this.props.error;\n  }\n\n  get onError(): number {\n    return this.props.onError;\n  }\n\n  get errorContainer(): number {\n    return this.props.errorContainer;\n  }\n\n  get onErrorContainer(): number {\n    return this.props.onErrorContainer;\n  }\n\n  get background(): number {\n    return this.props.background;\n  }\n\n  get onBackground(): number {\n    return this.props.onBackground;\n  }\n\n  get surface(): number {\n    return this.props.surface;\n  }\n\n  get onSurface(): number {\n    return this.props.onSurface;\n  }\n\n  get surfaceVariant(): number {\n    return this.props.surfaceVariant;\n  }\n\n  get onSurfaceVariant(): number {\n    return this.props.onSurfaceVariant;\n  }\n\n  get outline(): number {\n    return this.props.outline;\n  }\n\n  get outlineVariant(): number {\n    return this.props.outlineVariant;\n  }\n\n  get shadow(): number {\n    return this.props.shadow;\n  }\n\n  get scrim(): number {\n    return this.props.scrim;\n  }\n\n  get inverseSurface(): number {\n    return this.props.inverseSurface;\n  }\n\n  get inverseOnSurface(): number {\n    return this.props.inverseOnSurface;\n  }\n\n  get inversePrimary(): number {\n    return this.props.inversePrimary;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Material color scheme, based on the color's hue.\n   */\n  static light(argb: number): Scheme {\n    return Scheme.lightFromCorePalette(CorePalette.of(argb));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Material color scheme, based on the color's hue.\n   */\n  static dark(argb: number): Scheme {\n    return Scheme.darkFromCorePalette(CorePalette.of(argb));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Material content color scheme, based on the color's hue.\n   */\n  static lightContent(argb: number): Scheme {\n    return Scheme.lightFromCorePalette(CorePalette.contentOf(argb));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Material content color scheme, based on the color's hue.\n   */\n  static darkContent(argb: number): Scheme {\n    return Scheme.darkFromCorePalette(CorePalette.contentOf(argb));\n  }\n\n  /**\n   * Light scheme from core palette\n   */\n  static lightFromCorePalette(core: CorePalette): Scheme {\n    return new Scheme({\n      primary: core.a1.tone(40),\n      onPrimary: core.a1.tone(100),\n      primaryContainer: core.a1.tone(90),\n      onPrimaryContainer: core.a1.tone(10),\n      secondary: core.a2.tone(40),\n      onSecondary: core.a2.tone(100),\n      secondaryContainer: core.a2.tone(90),\n      onSecondaryContainer: core.a2.tone(10),\n      tertiary: core.a3.tone(40),\n      onTertiary: core.a3.tone(100),\n      tertiaryContainer: core.a3.tone(90),\n      onTertiaryContainer: core.a3.tone(10),\n      error: core.error.tone(40),\n      onError: core.error.tone(100),\n      errorContainer: core.error.tone(90),\n      onErrorContainer: core.error.tone(10),\n      background: core.n1.tone(99),\n      onBackground: core.n1.tone(10),\n      surface: core.n1.tone(99),\n      onSurface: core.n1.tone(10),\n      surfaceVariant: core.n2.tone(90),\n      onSurfaceVariant: core.n2.tone(30),\n      outline: core.n2.tone(50),\n      outlineVariant: core.n2.tone(80),\n      shadow: core.n1.tone(0),\n      scrim: core.n1.tone(0),\n      inverseSurface: core.n1.tone(20),\n      inverseOnSurface: core.n1.tone(95),\n      inversePrimary: core.a1.tone(80)\n    });\n  }\n\n  /**\n   * Dark scheme from core palette\n   */\n  static darkFromCorePalette(core: CorePalette): Scheme {\n    return new Scheme({\n      primary: core.a1.tone(80),\n      onPrimary: core.a1.tone(20),\n      primaryContainer: core.a1.tone(30),\n      onPrimaryContainer: core.a1.tone(90),\n      secondary: core.a2.tone(80),\n      onSecondary: core.a2.tone(20),\n      secondaryContainer: core.a2.tone(30),\n      onSecondaryContainer: core.a2.tone(90),\n      tertiary: core.a3.tone(80),\n      onTertiary: core.a3.tone(20),\n      tertiaryContainer: core.a3.tone(30),\n      onTertiaryContainer: core.a3.tone(90),\n      error: core.error.tone(80),\n      onError: core.error.tone(20),\n      errorContainer: core.error.tone(30),\n      onErrorContainer: core.error.tone(80),\n      background: core.n1.tone(10),\n      onBackground: core.n1.tone(90),\n      surface: core.n1.tone(10),\n      onSurface: core.n1.tone(90),\n      surfaceVariant: core.n2.tone(30),\n      onSurfaceVariant: core.n2.tone(80),\n      outline: core.n2.tone(60),\n      outlineVariant: core.n2.tone(30),\n      shadow: core.n1.tone(0),\n      scrim: core.n1.tone(0),\n      inverseSurface: core.n1.tone(90),\n      inverseOnSurface: core.n1.tone(20),\n      inversePrimary: core.a1.tone(40)\n    });\n  }\n\n  private constructor(private readonly props: {\n    primary: number,\n    onPrimary: number,\n    primaryContainer: number,\n    onPrimaryContainer: number,\n    secondary: number,\n    onSecondary: number,\n    secondaryContainer: number,\n    onSecondaryContainer: number,\n    tertiary: number,\n    onTertiary: number,\n    tertiaryContainer: number,\n    onTertiaryContainer: number,\n    error: number,\n    onError: number,\n    errorContainer: number,\n    onErrorContainer: number,\n    background: number,\n    onBackground: number,\n    surface: number,\n    onSurface: number,\n    surfaceVariant: number,\n    onSurfaceVariant: number,\n    outline: number,\n    outlineVariant: number,\n    shadow: number,\n    scrim: number,\n    inverseSurface: number,\n    inverseOnSurface: number,\n    inversePrimary: number\n  }) {}\n\n  toJSON() {\n    return {\n      ...this.props\n    };\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct.js';\nimport {TonalPalette} from '../palettes/tonal_palette.js';\nimport * as math from '../utils/math_utils.js';\n\nimport {DynamicScheme} from './dynamic_scheme.js';\nimport {Variant} from './variant.js';\n\n/**\n * A Dynamic Color theme that is intentionally detached from the source color.\n */\nexport class SchemeExpressive extends DynamicScheme {\n  /**\n   * Hues (in degrees) used at breakpoints such that designers can specify a\n   * hue rotation that occurs at a given break point.\n   */\n  private static readonly hues: number[] = [\n    0.0,\n    21.0,\n    51.0,\n    121.0,\n    151.0,\n    191.0,\n    271.0,\n    321.0,\n    360.0,\n  ];\n\n  /**\n   * Hue rotations (in degrees) of the Secondary [TonalPalette],\n   * corresponding to the breakpoints in [hues].\n   */\n  private static readonly secondaryRotations: number[] = [\n    45.0,\n    95.0,\n    45.0,\n    20.0,\n    45.0,\n    90.0,\n    45.0,\n    45.0,\n    45.0,\n  ];\n\n  /**\n   * Hue rotations (in degrees) of the Tertiary [TonalPalette],\n   * corresponding to the breakpoints in [hues].\n   */\n  private static readonly tertiaryRotations: number[] = [\n    120.0,\n    120.0,\n    20.0,\n    45.0,\n    20.0,\n    15.0,\n    20.0,\n    120.0,\n    120.0,\n  ];\n\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorArgb: sourceColorHct.toInt(),\n      variant: Variant.EXPRESSIVE,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(\n          math.sanitizeDegreesDouble(sourceColorHct.hue + 240.0), 40.0),\n      secondaryPalette: TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n              sourceColorHct, SchemeExpressive.hues,\n              SchemeExpressive.secondaryRotations),\n          24.0),\n      tertiaryPalette: TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n              sourceColorHct, SchemeExpressive.hues,\n              SchemeExpressive.tertiaryRotations),\n          32.0),\n      neutralPalette:\n          TonalPalette.fromHueAndChroma(sourceColorHct.hue + 15, 8.0),\n      neutralVariantPalette:\n          TonalPalette.fromHueAndChroma(sourceColorHct.hue + 15, 12.0),\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct.js';\nimport {TonalPalette} from '../palettes/tonal_palette.js';\n\nimport {DynamicScheme} from './dynamic_scheme.js';\nimport {Variant} from './variant.js';\n\n/**\n * A Dynamic Color theme that maxes out colorfulness at each position in the\n * Primary Tonal Palette.\n */\nexport class SchemeVibrant extends DynamicScheme {\n  /**\n   * Hues (in degrees) used at breakpoints such that designers can specify a\n   * hue rotation that occurs at a given break point.\n   */\n  private static readonly hues = [\n    0.0,\n    41.0,\n    61.0,\n    101.0,\n    131.0,\n    181.0,\n    251.0,\n    301.0,\n    360.0,\n  ];\n\n  /**\n   * Hue rotations (in degrees) of the Secondary [TonalPalette],\n   * corresponding to the breakpoints in [hues].\n   */\n  private static readonly secondaryRotations = [\n    18.0,\n    15.0,\n    10.0,\n    12.0,\n    15.0,\n    18.0,\n    15.0,\n    12.0,\n    12.0,\n  ];\n\n  /**\n   * Hue rotations (in degrees) of the Tertiary [TonalPalette],\n   * corresponding to the breakpoints in [hues].\n   */\n  private static readonly tertiaryRotations = [\n    35.0,\n    30.0,\n    20.0,\n    25.0,\n    30.0,\n    35.0,\n    30.0,\n    25.0,\n    25.0,\n  ];\n\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorArgb: sourceColorHct.toInt(),\n      variant: Variant.VIBRANT,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 200.0),\n      secondaryPalette: TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n              sourceColorHct, SchemeVibrant.hues,\n              SchemeVibrant.secondaryRotations),\n          24.0),\n      tertiaryPalette: TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n              sourceColorHct, SchemeVibrant.hues,\n              SchemeVibrant.tertiaryRotations),\n          32.0),\n      neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 10.0),\n      neutralVariantPalette:\n          TonalPalette.fromHueAndChroma(sourceColorHct.hue, 12.0),\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct.js';\nimport * as math from '../utils/math_utils.js';\n\n/**\n * Default options for ranking colors based on usage counts.\n * desired: is the max count of the colors returned.\n * fallbackColorARGB: Is the default color that should be used if no\n *                    other colors are suitable.\n * filter: controls if the resulting colors should be filtered to not include\n *         hues that are not used often enough, and colors that are effectively\n *         grayscale.\n */\ndeclare interface ScoreOptions {\n  desired?: number;\n  fallbackColorARGB?: number;\n  filter?: boolean;\n}\n\nconst SCORE_OPTION_DEFAULTS = {\n  desired: 4,  // 4 colors matches what Android wallpaper picker.\n  fallbackColorARGB: 0xff4285f4,  // Google Blue.\n  filter: true,  // Avoid unsuitable colors.\n};\n\nfunction compare(a: {hct: Hct, score: number}, b: {hct: Hct, score: number}): number {\n  if (a.score > b.score) {\n    return -1;\n  } else if (a.score < b.score) {\n    return 1;\n  }\n  return 0;\n}\n\n/**\n *  Given a large set of colors, remove colors that are unsuitable for a UI\n *  theme, and rank the rest based on suitability.\n *\n *  Enables use of a high cluster count for image quantization, thus ensuring\n *  colors aren't muddied, while curating the high cluster count to a much\n *  smaller number of appropriate choices.\n */\nexport class Score {\n  private static readonly TARGET_CHROMA = 48.0;  // A1 Chroma\n  private static readonly WEIGHT_PROPORTION = 0.7;\n  private static readonly WEIGHT_CHROMA_ABOVE = 0.3;\n  private static readonly WEIGHT_CHROMA_BELOW = 0.1;\n  private static readonly CUTOFF_CHROMA = 5.0;\n  private static readonly CUTOFF_EXCITED_PROPORTION = 0.01;\n\n  private constructor() {}\n\n  /**\n   * Given a map with keys of colors and values of how often the color appears,\n   * rank the colors based on suitability for being used for a UI theme.\n   *\n   * @param colorsToPopulation map with keys of colors and values of how often\n   *     the color appears, usually from a source image.\n   * @param {ScoreOptions} options optional parameters.\n   * @return Colors sorted by suitability for a UI theme. The most suitable\n   *     color is the first item, the least suitable is the last. There will\n   *     always be at least one color returned. If all the input colors\n   *     were not suitable for a theme, a default fallback color will be\n   *     provided, Google Blue.\n   */\n  static score(\n    colorsToPopulation: Map<number, number>, options?: ScoreOptions):\n      number[] {\n    const {desired, fallbackColorARGB, filter} = {...SCORE_OPTION_DEFAULTS, ...options};\n    // Get the HCT color for each Argb value, while finding the per hue count and\n    // total count.\n    const colorsHct: Hct[] = [];\n    const huePopulation = new Array<number>(360).fill(0);\n    let populationSum = 0;\n    for (const [argb, population] of colorsToPopulation.entries()) {\n      const hct = Hct.fromInt(argb);\n      colorsHct.push(hct);\n      const hue = Math.floor(hct.hue);\n      huePopulation[hue] += population;\n      populationSum += population;\n    }\n\n    // Hues with more usage in neighboring 30 degree slice get a larger number.\n    const hueExcitedProportions = new Array<number>(360).fill(0.0);\n    for (let hue = 0; hue < 360; hue++) {\n      const proportion = huePopulation[hue] / populationSum;\n      for (let i = hue - 14; i < hue + 16; i++) {\n        const neighborHue = math.sanitizeDegreesInt(i);\n        hueExcitedProportions[neighborHue] += proportion;\n      }\n    }\n\n    // Scores each HCT color based on usage and chroma, while optionally\n    // filtering out values that do not have enough chroma or usage.\n    const scoredHct = new Array<{hct: Hct, score: number}>();\n    for (const hct of colorsHct) {\n      const hue = math.sanitizeDegreesInt(Math.round(hct.hue));\n      const proportion = hueExcitedProportions[hue];\n      if (filter && (hct.chroma < Score.CUTOFF_CHROMA || proportion <= Score.CUTOFF_EXCITED_PROPORTION)) {\n        continue;\n      }\n\n      const proportionScore = proportion * 100.0 * Score.WEIGHT_PROPORTION;\n      const chromaWeight = hct.chroma < Score.TARGET_CHROMA ? Score.WEIGHT_CHROMA_BELOW : Score.WEIGHT_CHROMA_ABOVE;\n      const chromaScore = (hct.chroma - Score.TARGET_CHROMA) * chromaWeight;\n      const score = proportionScore + chromaScore;\n      scoredHct.push({hct, score});\n    }\n    // Sorted so that colors with higher scores come first.\n    scoredHct.sort(compare);\n\n    // Iterates through potential hue differences in degrees in order to select\n    // the colors with the largest distribution of hues possible. Starting at\n    // 90 degrees(maximum difference for 4 colors) then decreasing down to a\n    // 15 degree minimum.\n    const chosenColors: Hct[] = [];\n    for (let differenceDegrees = 90; differenceDegrees >= 15; differenceDegrees--) {\n      chosenColors.length = 0;\n      for (const {hct} of scoredHct) {\n        const duplicateHue = chosenColors.find(chosenHct => {\n          return math.differenceDegrees(hct.hue, chosenHct.hue) < differenceDegrees;\n        });\n        if (!duplicateHue) {\n          chosenColors.push(hct);\n        }\n        if (chosenColors.length >= desired) break;\n      }\n      if (chosenColors.length >= desired) break;\n    }\n    const colors: number[] = [];\n    if (chosenColors.length === 0) {\n      colors.push(fallbackColorARGB);\n    }\n    for (const chosenHct of chosenColors) {\n      colors.push(chosenHct.toInt());\n    }\n    return colors;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as colorUtils from './color_utils.js';\n\n/**\n * Utility methods for hexadecimal representations of colors.\n */\n\n/**\n * @param argb ARGB representation of a color.\n * @return Hex string representing color, ex. #ff0000 for red.\n */\nexport function hexFromArgb(argb: number) {\n  const r = colorUtils.redFromArgb(argb);\n  const g = colorUtils.greenFromArgb(argb);\n  const b = colorUtils.blueFromArgb(argb);\n  const outParts = [r.toString(16), g.toString(16), b.toString(16)];\n\n  // Pad single-digit output values\n  for (const [i, part] of outParts.entries()) {\n    if (part.length === 1) {\n      outParts[i] = '0' + part;\n    }\n  }\n\n  return '#' + outParts.join('');\n}\n\n/**\n * @param hex String representing color as hex code. Accepts strings with or\n *     without leading #, and string representing the color using 3, 6, or 8\n *     hex characters.\n * @return ARGB representation of color.\n */\nexport function argbFromHex(hex: string) {\n  hex = hex.replace('#', '');\n  const isThree = hex.length === 3;\n  const isSix = hex.length === 6;\n  const isEight = hex.length === 8;\n  if (!isThree && !isSix && !isEight) {\n    throw new Error('unexpected hex ' + hex);\n  }\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (isThree) {\n    r = parseIntHex(hex.slice(0, 1).repeat(2));\n    g = parseIntHex(hex.slice(1, 2).repeat(2));\n    b = parseIntHex(hex.slice(2, 3).repeat(2));\n  } else if (isSix) {\n    r = parseIntHex(hex.slice(0, 2));\n    g = parseIntHex(hex.slice(2, 4));\n    b = parseIntHex(hex.slice(4, 6));\n  } else if (isEight) {\n    r = parseIntHex(hex.slice(2, 4));\n    g = parseIntHex(hex.slice(4, 6));\n    b = parseIntHex(hex.slice(6, 8));\n  }\n\n  return (\n      ((255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) | (b & 0x0ff)) >>>\n      0);\n}\n\nfunction parseIntHex(value: string) {\n  // tslint:disable-next-line:ban\n  return parseInt(value, 16);\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {QuantizerCelebi} from '../quantize/quantizer_celebi.js';\nimport {Score} from '../score/score.js';\n\nimport {argbFromRgb} from './color_utils.js';\n\n/**\n * Get the source color from an image.\n *\n * @param image The image element\n * @return Source color - the color most suitable for creating a UI theme\n */\nexport async function sourceColorFromImage(image: HTMLImageElement) {\n  // Convert Image data to Pixel Array\n  const imageBytes = await new Promise<Uint8ClampedArray>((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    if (!context) {\n      reject(new Error('Could not get canvas context'));\n      return;\n    }\n    const callback = () => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n      context.drawImage(image, 0, 0);\n      let rect = [0, 0, image.width, image.height];\n      const area = image.dataset['area'];\n      if (area && /^\\d+(\\s*,\\s*\\d+){3}$/.test(area)) {\n        rect = area.split(/\\s*,\\s*/).map(s => {\n          // tslint:disable-next-line:ban\n          return parseInt(s, 10);\n        });\n      }\n      const [sx, sy, sw, sh] = rect;\n      resolve(context.getImageData(sx, sy, sw, sh).data);\n    };\n    if (image.complete) {\n      callback();\n    } else {\n      image.onload = callback;\n    }\n  });\n\n  // Convert Image data to Pixel Array\n  const pixels: number[] = [];\n  for (let i = 0; i < imageBytes.length; i += 4) {\n    const r = imageBytes[i];\n    const g = imageBytes[i + 1];\n    const b = imageBytes[i + 2];\n    const a = imageBytes[i + 3];\n    if (a < 255) {\n      continue;\n    }\n    const argb = argbFromRgb(r, g, b);\n    pixels.push(argb);\n  }\n\n  // Convert Pixels to Material Colors\n  const result = QuantizerCelebi.quantize(pixels, 128);\n  const ranked = Score.score(result);\n  const top = ranked[0];\n  return top;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Blend} from '../blend/blend.js';\nimport {CorePalette} from '../palettes/core_palette.js';\nimport {TonalPalette} from '../palettes/tonal_palette.js';\nimport {Scheme} from '../scheme/scheme.js';\n\nimport {sourceColorFromImage} from './image_utils.js';\nimport {hexFromArgb} from './string_utils.js';\n\n/**\n * Custom color used to pair with a theme\n */\nexport interface CustomColor {\n  value: number;\n  name: string;\n  blend: boolean;\n}\n\n/**\n * Color group\n */\nexport interface ColorGroup {\n  color: number;\n  onColor: number;\n  colorContainer: number;\n  onColorContainer: number;\n}\n\n/**\n * Custom Color Group\n */\nexport interface CustomColorGroup {\n  color: CustomColor;\n  value: number;\n  light: ColorGroup;\n  dark: ColorGroup;\n}\n\n/**\n * Theme\n */\nexport interface Theme {\n  source: number;\n  schemes: {light: Scheme; dark: Scheme;};\n  palettes: {\n    primary: TonalPalette; secondary: TonalPalette; tertiary: TonalPalette;\n    neutral: TonalPalette;\n    neutralVariant: TonalPalette;\n    error: TonalPalette;\n  };\n  customColors: CustomColorGroup[];\n}\n\n/**\n * Generate a theme from a source color\n *\n * @param source Source color\n * @param customColors Array of custom colors\n * @return Theme object\n */\nexport function themeFromSourceColor(\n    source: number, customColors: CustomColor[] = []): Theme {\n  const palette = CorePalette.of(source);\n  return {\n    source,\n    schemes: {\n      light: Scheme.light(source),\n      dark: Scheme.dark(source),\n    },\n    palettes: {\n      primary: palette.a1,\n      secondary: palette.a2,\n      tertiary: palette.a3,\n      neutral: palette.n1,\n      neutralVariant: palette.n2,\n      error: palette.error,\n    },\n    customColors: customColors.map((c) => customColor(source, c)),\n  };\n}\n\n/**\n * Generate a theme from an image source\n *\n * @param image Image element\n * @param customColors Array of custom colors\n * @return Theme object\n */\nexport async function themeFromImage(\n    image: HTMLImageElement, customColors: CustomColor[] = []) {\n  const source = await sourceColorFromImage(image);\n  return themeFromSourceColor(source, customColors);\n}\n\n/**\n * Generate custom color group from source and target color\n *\n * @param source Source color\n * @param color Custom color\n * @return Custom color group\n *\n * @link https://m3.material.io/styles/color/the-color-system/color-roles\n */\nexport function customColor(\n    source: number, color: CustomColor): CustomColorGroup {\n  let value = color.value;\n  const from = value;\n  const to = source;\n  if (color.blend) {\n    value = Blend.harmonize(from, to);\n  }\n  const palette = CorePalette.of(value);\n  const tones = palette.a1;\n  return {\n    color,\n    value,\n    light: {\n      color: tones.tone(40),\n      onColor: tones.tone(100),\n      colorContainer: tones.tone(90),\n      onColorContainer: tones.tone(10),\n    },\n    dark: {\n      color: tones.tone(80),\n      onColor: tones.tone(20),\n      colorContainer: tones.tone(30),\n      onColorContainer: tones.tone(90),\n    },\n  };\n}\n\n/**\n * Apply a theme to an element\n *\n * @param theme Theme object\n * @param options Options\n */\nexport function applyTheme(theme: Theme, options?: {\n  dark?: boolean,\n  target?: HTMLElement,\n  brightnessSuffix?: boolean,\n  paletteTones?: number[],\n}) {\n  const target = options?.target || document.body;\n  const isDark = options?.dark ?? false;\n  const scheme = isDark ? theme.schemes.dark : theme.schemes.light;\n  setSchemeProperties(target, scheme);\n  if (options?.brightnessSuffix) {\n    setSchemeProperties(target, theme.schemes.dark, '-dark');\n    setSchemeProperties(target, theme.schemes.light, '-light');\n  }\n  if (options?.paletteTones) {\n    const tones = options?.paletteTones ?? [];\n    for (const [key, palette] of Object.entries(theme.palettes)) {\n      const paletteKey = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n      for (const tone of tones) {\n        const token = `--md-ref-palette-${paletteKey}-${paletteKey}${tone}`;\n        const color = hexFromArgb(palette.tone(tone));\n        target.style.setProperty(token, color);\n      }\n    }\n  }\n}\n\nfunction setSchemeProperties(\n    target: HTMLElement,\n    scheme: Scheme,\n    suffix: string = '',\n) {\n  for (const [key, value] of Object.entries(scheme.toJSON())) {\n    const token = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const color = hexFromArgb(value);\n    target.style.setProperty(`--md-sys-color-${token}${suffix}`, color);\n  }\n}", "import * as soberTheme from '../dist/main'\r\n\r\nif (!globalThis.sober) globalThis.sober = {}\r\nglobalThis.sober = { ...globalThis.sober, theme: soberTheme }"],
  "mappings": "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",
  "names": ["main_exports", "__export", "argbFromHex", "createScheme", "hexFromArgb", "signum", "num", "lerp", "start", "stop", "amount", "clampInt", "min", "max", "input", "clampDouble", "sanitizeDegreesInt", "degrees", "sanitizeDegreesDouble", "rotationDirection", "from", "to", "differenceDegrees", "a", "b", "matrixMultiply", "row", "matrix", "c", "SRGB_TO_XYZ", "XYZ_TO_SRGB", "WHITE_POINT_D65", "argbFromRgb", "red", "green", "blue", "argbFromLinrgb", "linrgb", "r", "delinearized", "g", "b", "alphaFromArgb", "argb", "redFromArgb", "greenFromArgb", "blueFromArgb", "argbFromXyz", "x", "y", "z", "matrix", "XYZ_TO_SRGB", "linearR", "linearG", "linearB", "r", "delinearized", "g", "b", "argbFromRgb", "xyzFromArgb", "argb", "linearized", "redFromArgb", "greenFromArgb", "blueFromArgb", "matrixMultiply", "SRGB_TO_XYZ", "argbFromLab", "l", "a", "whitePoint", "WHITE_POINT_D65", "fy", "fx", "fz", "xNormalized", "labInvf", "yNormalized", "zNormalized", "labFromArgb", "labF", "argbFromLstar", "lstar", "yFromLstar", "component", "lstarFromArgb", "lstarFromY", "rgbComponent", "normalized", "clampInt", "whitePointD65", "labF", "t", "e", "kappa", "labInvf", "ft", "ft3", "ViewingConditions", "_ViewingConditions", "whitePoint", "whitePointD65", "adaptingLuminance", "yFromLstar", "backgroundLstar", "surround", "discountingIlluminant", "xyz", "rW", "gW", "bW", "f", "c", "lerp", "d", "nc", "rgbD", "k", "k4", "k4F", "fl", "n", "z", "nbb", "ncb", "rgbAFactors", "rgbA", "aw", "fLRoot", "Cam16", "_Cam16", "hue", "chroma", "j", "q", "m", "s", "jstar", "astar", "bstar", "other", "dJ", "dA", "dB", "dEPrime", "argb", "ViewingConditions", "viewingConditions", "red", "green", "blue", "redL", "linearized", "greenL", "blueL", "x", "y", "z", "rC", "gC", "bC", "rD", "gD", "bD", "rAF", "gAF", "bAF", "rA", "signum", "gA", "bA", "a", "b", "u", "p2", "atanDegrees", "hueRadians", "ac", "huePrime", "eHue", "t", "alpha", "c", "mstar", "h", "hRad", "p1", "hSin", "hCos", "gamma", "rCBase", "gCBase", "bCBase", "rF", "gF", "bF", "argbFromXyz", "J", "Q", "C", "M", "HctSolver", "_HctSolver", "angle", "rgbComponent", "normalized", "delinearized", "component", "af", "signum", "linrgb", "scaledDiscount", "matrixMultiply", "rA", "gA", "bA", "b", "a", "c", "deltaAB", "deltaAC", "source", "mid", "target", "t", "coordinate", "axis", "x", "y", "n", "kR", "kG", "kB", "coordA", "coordB", "g", "r", "targetHue", "left", "right", "leftHue", "rightHue", "initialized", "uncut", "midHue", "segment", "lPlane", "rPlane", "i", "mPlane", "midPlaneCoordinate", "adapted", "adaptedAbs", "base", "hueRadians", "chroma", "j", "viewingConditions", "ViewingConditions", "tInnerCoeff", "p1", "hSin", "hCos", "iterationRound", "jNormalized", "alpha", "p2", "gamma", "rCScaled", "gCScaled", "bCScaled", "fnj", "argbFromLinrgb", "hueDegrees", "lstar", "argbFromLstar", "sanitizeDegreesDouble", "yFromLstar", "exactAnswer", "Cam16", "Hct", "_Hct", "hue", "chroma", "tone", "HctSolver", "argb", "newHue", "newChroma", "newTone", "cam", "Cam16", "lstarFromArgb", "vc", "viewedInVc", "recastInVc", "ViewingConditions", "lstarFromY", "Blend", "_Blend", "designColor", "sourceColor", "fromHct", "Hct", "toHct", "differenceDegrees", "rotationDegrees", "outputHue", "sanitizeDegreesDouble", "rotationDirection", "from", "to", "amount", "ucs", "ucsCam", "Cam16", "fromCam", "lstarFromArgb", "toCam", "fromJ", "fromA", "fromB", "toJ", "toA", "toB", "jstar", "astar", "bstar", "Contrast", "_Contrast", "toneA", "toneB", "clampDouble", "yFromLstar", "y1", "y2", "lighter", "darker", "tone", "ratio", "darkY", "lightY", "realContrast", "delta", "returnValue", "lstarFromY", "lighterSafe", "darkerSafe", "DislikeAnalyzer", "_DislikeAnalyzer", "hct", "huePasses", "chromaPasses", "tonePasses", "Hct", "DynamicColor", "_DynamicColor", "args", "name", "palette", "tone", "isBackground", "background", "secondBackground", "contrastCurve", "toneDeltaPair", "scheme", "cachedAnswer", "answer", "decreasingContrast", "roleA", "roleB", "delta", "polarity", "stayTogether", "bgTone", "aIsNearer", "nearer", "farther", "amNearer", "expansionDir", "nContrast", "fContrast", "nInitialTone", "nTone", "Contrast", "fInitialTone", "fTone", "clampDouble", "desiredRatio", "bg1", "bg2", "bgTone1", "bgTone2", "upper", "lower", "lightOption", "darkOption", "availables", "ratio", "lighterTone", "darkerTone", "lighterRatio", "darkerRatio", "negligibleDifference", "Variant", "ContrastCurve", "low", "normal", "medium", "high", "contrastLevel", "lerp", "ToneDeltaPair", "roleA", "roleB", "delta", "polarity", "stayTogether", "isFidelity", "scheme", "Variant", "isMonochrome", "findDesiredChromaByTone", "hue", "chroma", "tone", "byDecreasingTone", "answer", "closestToChroma", "Hct", "chromaPeak", "potentialSolution", "potentialDelta", "currentDelta", "viewingConditionsForAlbers", "ViewingConditions", "performAlbers", "prealbers", "albersd", "DynamicColor", "MaterialDynamicColors", "_MaterialDynamicColors", "s", "ContrastCurve", "ToneDeltaPair", "initialTone", "albersTone", "proposedHct", "DislikeAnalyzer", "TonalPalette", "_TonalPalette", "argb", "hct", "Hct", "hue", "chroma", "keyColor", "smallestDeltaHct", "smallestDelta", "delta", "hctAdd", "hctAddDelta", "hctSubtract", "hctSubtractDelta", "tone", "CorePalette", "_CorePalette", "argb", "colors", "content", "palette", "p", "isContent", "hct", "Hct", "hue", "chroma", "TonalPalette", "LabPointProvider", "argb", "labFromArgb", "point", "argbFromLab", "from", "to", "dL", "dA", "dB", "MAX_ITERATIONS", "MIN_MOVEMENT_DISTANCE", "QuantizerWsmeans", "inputPixels", "startingClusters", "maxColors", "pixelToCount", "points", "pixels", "pointProvider", "LabPointProvider", "pointCount", "i", "inputPixel", "pixelCount", "counts", "pixel", "count", "clusterCount", "clusters", "additionalClustersNeeded", "l", "a", "b", "clusterIndices", "indexMatrix", "j", "distanceToIndexMatrix", "DistanceAndIndex", "pixelCountSums", "iteration", "distance", "pointsMoved", "point", "previousClusterIndex", "previousCluster", "previousDistance", "minimumDistance", "newClusterIndex", "componentASums", "componentBSums", "componentCSums", "clusterIndex", "c", "argbToPopulation", "possibleNewCluster", "QuantizerMap", "pixels", "countByColor", "i", "pixel", "alphaFromArgb", "INDEX_BITS", "SIDE_LENGTH", "TOTAL_SIZE", "directions", "QuantizerWu", "weights", "momentsR", "momentsG", "momentsB", "moments", "cubes", "pixels", "maxColors", "createBoxesResult", "countByColor", "QuantizerMap", "pixel", "count", "red", "redFromArgb", "green", "greenFromArgb", "blue", "blueFromArgb", "bitsToRemove", "iR", "iG", "iB", "index", "r", "area", "areaR", "areaG", "areaB", "area2", "g", "line", "lineR", "lineG", "lineB", "line2", "b", "previousIndex", "Box", "volumeVariance", "generatedColorCount", "next", "i", "temp", "j", "CreateBoxesResult", "colorCount", "colors", "cube", "weight", "color", "dr", "dg", "db", "xx", "hypotenuse", "volume", "one", "two", "wholeR", "wholeG", "wholeB", "wholeW", "maxRResult", "maxGResult", "maxBResult", "direction", "maxR", "maxG", "maxB", "first", "last", "bottomR", "bottomG", "bottomB", "bottomW", "max", "cut", "halfR", "halfG", "halfB", "halfW", "tempNumerator", "tempDenominator", "MaximizeResult", "moment", "position", "r0", "r1", "g0", "g1", "b0", "b1", "vol", "requestedCount", "resultCount", "cutLocation", "maximum", "QuantizerCelebi", "pixels", "maxColors", "wuResult", "QuantizerWu", "QuantizerWsmeans", "DynamicScheme", "args", "Hct", "TonalPalette", "sourceColor", "hues", "rotations", "sourceHue", "sanitizeDegreesDouble", "size", "i", "thisHue", "nextHue", "Scheme", "_Scheme", "argb", "CorePalette", "core", "props", "SchemeExpressive", "_SchemeExpressive", "DynamicScheme", "sourceColorHct", "isDark", "contrastLevel", "Variant", "TonalPalette", "sanitizeDegreesDouble", "SchemeVibrant", "_SchemeVibrant", "DynamicScheme", "sourceColorHct", "isDark", "contrastLevel", "Variant", "TonalPalette", "SCORE_OPTION_DEFAULTS", "compare", "a", "b", "Score", "_Score", "colorsToPopulation", "options", "desired", "fallbackColorARGB", "filter", "colorsHct", "huePopulation", "populationSum", "argb", "population", "hct", "Hct", "hue", "hueExcitedProportions", "proportion", "i", "neighborHue", "sanitizeDegreesInt", "scoredHct", "proportionScore", "chromaWeight", "chromaScore", "score", "chosenColors", "differenceDegrees", "chosenHct", "colors", "hexFromArgb", "argb", "r", "redFromArgb", "g", "greenFromArgb", "b", "blueFromArgb", "outParts", "i", "part", "argbFromHex", "hex", "isThree", "isSix", "isEight", "parseIntHex", "value", "sourceColorFromImage", "image", "imageBytes", "resolve", "reject", "canvas", "context", "callback", "rect", "area", "s", "sx", "sy", "sw", "sh", "pixels", "i", "r", "g", "b", "argb", "argbFromRgb", "result", "QuantizerCelebi", "Score", "themeFromSourceColor", "source", "customColors", "palette", "CorePalette", "Scheme", "c", "customColor", "themeFromImage", "image", "sourceColorFromImage", "color", "value", "from", "to", "Blend", "tones", "customs", "argbFromHex", "getTheme", "theme", "palettes", "light", "dark", "colors", "hexFromArgb", "inside", "outside", "item", "customColors", "str", "key", "createScheme", "source", "options", "customColor", "setPage", "style", "resolve", "reject", "themeFromSourceColor", "themeFromImage", "img", "main_exports"]
}
